{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            },
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n"
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "\nHello Notebook",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "code001",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "from nltk.corpus import cmudict",
                    "transcr = cmudict.dict()",
                    "",
                    "def tokenizeVerse(verse):",
                    "    # preprocessing",
                    "    verse = verse.strip().lower()",
                    "    # remove all symbols except letters, space, apostrophe",
                    "    accepted_chars = set('abcdefghijklmnopqrstuvwxyz \\'\\n')",
                    "    verse = ''.join(filter(accepted_chars.__contains__, verse))",
                    "    # separate string into lines",
                    "    lines = verse.split('\\n')",
                    "",
                    "    vocab = set()",
                    "    # build nested tokenized string",
                    "    verse_nested = []",
                    "    for line in lines:",
                    "        # separate each line into words",
                    "        words = line.split()",
                    "        verse_nested.append(words)",
                    "        # add word into vocabulary",
                    "        for word in words:",
                    "            vocab.add(word)",
                    "    return verse_nested, vocab",
                    "",
                    "",
                    "def phonemes(words):",
                    "    phonemes = {}",
                    "    for word in words:",
                    "        # get possible pronunciations from dict",
                    "        possible_pronunciations =  transcr.get(word, [['NULL']])",
                    "        if word not in transcr:",
                    "            # TODO: generate a guess on the pronunciation",
                    "            pass",
                    "        # strip out emphasis on vowels",
                    "        for pronunciation in possible_pronunciations:",
                    "            for i in range(len(pronunciation)):",
                    "                pronunciation[i] = ''.join(c for c in pronunciation[i] if not c.isdigit())",
                    "        phonemes[word] = possible_pronunciations",
                    "    return phonemes",
                    "",
                    "",
                    "def allPhonemePermutations(line, phoneme_dict, pos=0):",
                    "    if pos >= len(line):",
                    "        return []",
                    "    else:",
                    "        tail_permutations = allPhonemePermutations(line, phoneme_dict, pos+1)",
                    "        # cons all possible head word pronunciations",
                    "        all_permutations = []",
                    "        for head_pronunciation in phoneme_dict[line[pos]]:",
                    "            # tag each phoneme with their word for later reconstruction",
                    "            head = [(phoneme, pos) for phoneme in head_pronunciation]",
                    "            if tail_permutations:",
                    "                for tail in tail_permutations:",
                    "                    all_permutations.append(head + tail)",
                    "            else:",
                    "                all_permutations.append(head)",
                    "        return all_permutations",
                    "",
                    "def phonemeSimilarity(ph_a, ph_b):",
                    "    # Custom phoneme rhyming similarity in range [0, 1]",
                    "    relative_score = 0",
                    "    if ph_a == ph_b:",
                    "        relative_score = 1.",
                    "    else:",
                    "        relative_score = 0.",
                    "    return relative_score",
                    "    ",
                    "    ",
                    "",
                    "def alignPhonemeSequences(a_seq, b_seq):",
                    "    # Smith-Waterman alignment with custom phoneme similarity scoring",
                    "    GAP_PENALTY = -1.",
                    "    MIN_SCORE = -1.",
                    "    MAX_SCORE = 2.",
                    "    score_range = MAX_SCORE - MIN_SCORE",
                    "    ",
                    "    width = len(a_seq)+1",
                    "    height = len(b_seq)+1",
                    "    H = [[0] * width for i in range(height)]",
                    "",
                    "    # Run the DP alg",
                    "    for row in range(1,height):",
                    "        for col in range(1,width):",
                    "            relative_score = phonemeSimilarity(a_seq[col-1], b_seq[row-1])",
                    "            align = H[row-1][col-1] + relative_score * score_range + MIN_SCORE",
                    "            deletion = H[row-1][col] + GAP_PENALTY",
                    "            insertion = H[row][col-1] + GAP_PENALTY",
                    "            H[row][col] = max(0, align, deletion, insertion)",
                    "",
                    "    # extract the solution",
                    "    # find max value in H",
                    "    max_value = 0",
                    "    max_row = None",
                    "    max_col = None",
                    "    for row in range(height):",
                    "        for col in range(width):",
                    "            if H[row][col] >= max_value:",
                    "                max_value = H[row][col]",
                    "                max_row = row",
                    "                max_col = col",
                    "    # find path up/left/upleft",
                    "    # upleft = align (need to check if match or mismatch)",
                    "    # up = deletion in a_seq",
                    "    # left = insertion in a_seq",
                    "    alignment = []",
                    "    while max_row > 0 and max_col > 0:",
                    "        corner = H[max_row-1][max_col-1]",
                    "        up = H[max_row-1][max_col]",
                    "        left = H[max_row][max_col-1]",
                    "        ",
                    "        if left>corner and left>up:",
                    "            max_col -= 1",
                    "        elif up>corner and up>left:",
                    "            max_row -= 1",
                    "        else: # corner>up and corner>left",
                    "            max_row -= 1",
                    "            max_col -= 1",
                    "            if phonemeSimilarity(a_seq[max_col], b_seq[max_row]) > 0.5:",
                    "                alignment.append((max_col, max_row))",
                    "        ",
                    "    return max_value, alignment",
                    "",
                    "",
                    "def alignRhyme(line_a, line_b, phoneme_dict):",
                    "    # get all possible ways to pronounce the line",
                    "    possible_a_seqs = allPhonemePermutations(line_a, phoneme_dict)",
                    "    possible_b_seqs = allPhonemePermutations(line_b, phoneme_dict)",
                    "    # select best alignment of these permutations",
                    "    max_score = float('-inf')",
                    "    best_alignment = []",
                    "    best_a = None",
                    "    best_b = None",
                    "    for a_seq in possible_a_seqs:",
                    "        for b_seq in possible_b_seqs:",
                    "            score, alignment = alignPhonemeSequences([p[0] for p in a_seq], [p[0] for p in b_seq])",
                    "            if score >= max_score:",
                    "                max_score = score",
                    "                best_alignment = alignment",
                    "                best_a = a_seq",
                    "                best_b = b_seq",
                    "    # convert from alignment between phonemes to alignment between words",
                    "    rhyme_alignment = {}",
                    "    for (i_a, i_b) in best_alignment:",
                    "        i_word_a = best_a[i_a][1]",
                    "        i_word_b = best_b[i_b][1]",
                    "        word_pair = (i_word_a, i_word_b)",
                    "        if word_pair not in rhyme_alignment:",
                    "            rhyme_alignment[word_pair] = 0",
                    "        rhyme_alignment[word_pair] += 1",
                    "    rhyme_alignment = [(pair[0], pair[1], rhyme_alignment[pair]) for pair in rhyme_alignment]",
                    "    return rhyme_alignment",
                    "",
                    "",
                    "def wordLinks(verse):",
                    "    verse_nested, vocab = tokenizeVerse(verse)",
                    "    phoneme_dict = phonemes(vocab)",
                    "    # get build rhyming graph: words=nodes, rhymes=edges",
                    "    word_links = []",
                    "    if len(verse_nested) > 1:",
                    "        prev_line = verse_nested[0]",
                    "        for i in range(1, len(verse_nested)):",
                    "            curr_line = verse_nested[i]",
                    "            # get rhyme alignment for these two lines",
                    "            rhyme_alignment = alignRhyme(prev_line, curr_line, phoneme_dict)",
                    "            word_links.append(rhyme_alignment)",
                    "            # shift for next iteration",
                    "            prev_line = curr_line",
                    "        ",
                    "    return verse_nested, word_links",
                    "    ",
                    "",
                    "def analyzeRap(verse):",
                    "    # get rhyme graph",
                    "    verse_nested, word_links = wordLinks(verse)",
                    "    # save to beaker",
                    "    beaker.words = verse_nested # list of list of words",
                    "    beaker.rhymes = word_links # list of list of (wordindex, wordindex, multiplicity)",
                    "    return",
                    "",
                    "# rap here",
                    "verse = \"\"\"\\",
                    "His palms are sweaty, knees weak, arms are heavy",
                    "There's vomit on his sweater already, mom's spaghetti",
                    "He's nervous, but on the surface he looks calm and ready to drop bombs,",
                    "But he keeps on forgetting what he wrote down,",
                    "The whole crowd goes so loud",
                    "He opens his mouth, but the words won't come out",
                    "He's choking how, everybody's joking now",
                    "The clock's run out, time's up, over, blaow!",
                    "Snap back to reality. Oh, there goes gravity",
                    "Oh, there goes Rabbit, he choked",
                    "He's so mad, but he won't give up that",
                    "\"\"\"",
                    "",
                    "analyzeRap(verse)",
                    ""
                ]
            },
            "output": {
                "selectedType": "Hidden",
                "outputArrived": true,
                "elapsedTime": 11778,
                "state": {},
                "pluginName": "IPython",
                "shellId": "990C66F9DAE8419288BB5705EE32B19A",
                "dataresult": 3
            },
            "evaluatorReader": true,
            "lineCount": 196
        },
        {
            "id": "codemuKi0Q",
            "type": "code",
            "evaluator": "Html",
            "input": {
                "body": [
                    "<style>",
                    ".node {",
                    "  stroke: #fff;",
                    "  stroke-width: 1.5px;",
                    "}",
                    "",
                    ".link {",
                    "  stroke: #999;",
                    "  stroke-opacity: .6;",
                    "}",
                    "</style>",
                    "<div id=\"graph\"></div>"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<script>\nvar beaker = bkHelper.getBeakerObject().beakerObj;\n</script>\n<style>\n.node {\n  stroke: #fff;\n  stroke-width: 1.5px;\n}\n\n.link {\n  stroke: #999;\n  stroke-opacity: .6;\n}\n</style>\n<div id=\"graph\"><svg height=\"600\" width=\"800\">Rap Analyzer<g transform=\"translate(30,30)\"><text dx=\"-20\">his</text></g><g transform=\"translate(112.22222222222223,30)\"><text dx=\"-20\">palms</text></g><g transform=\"translate(194.44444444444446,30)\"><text dx=\"-20\">are</text></g><g transform=\"translate(276.66666666666663,30)\"><text dx=\"-20\">sweaty</text></g><g transform=\"translate(358.8888888888889,30)\"><text dx=\"-20\">knees</text></g><g transform=\"translate(441.1111111111111,30)\"><text dx=\"-20\">weak</text></g><g transform=\"translate(523.3333333333333,30)\"><text dx=\"-20\">arms</text></g><g transform=\"translate(605.5555555555555,30)\"><text dx=\"-20\">are</text></g><g transform=\"translate(687.7777777777778,30)\"><text dx=\"-20\">heavy</text></g><g transform=\"translate(30,79.0909090909091)\"><text dx=\"-20\">there's</text></g><g transform=\"translate(122.5,79.0909090909091)\"><text dx=\"-20\">vomit</text></g><g transform=\"translate(215,79.0909090909091)\"><text dx=\"-20\">on</text></g><g transform=\"translate(307.5,79.0909090909091)\"><text dx=\"-20\">his</text></g><g transform=\"translate(400,79.0909090909091)\"><text dx=\"-20\">sweater</text></g><g transform=\"translate(492.5,79.0909090909091)\"><text dx=\"-20\">already</text></g><g transform=\"translate(585,79.0909090909091)\"><text dx=\"-20\">mom's</text></g><g transform=\"translate(677.5,79.0909090909091)\"><text dx=\"-20\">spaghetti</text></g><g transform=\"translate(30,128.1818181818182)\"><text dx=\"-20\">he's</text></g><g transform=\"translate(82.85714285714286,128.1818181818182)\"><text dx=\"-20\">nervous</text></g><g transform=\"translate(135.71428571428572,128.1818181818182)\"><text dx=\"-20\">but</text></g><g transform=\"translate(188.57142857142858,128.1818181818182)\"><text dx=\"-20\">on</text></g><g transform=\"translate(241.42857142857142,128.1818181818182)\"><text dx=\"-20\">the</text></g><g transform=\"translate(294.2857142857143,128.1818181818182)\"><text dx=\"-20\">surface</text></g><g transform=\"translate(347.14285714285717,128.1818181818182)\"><text dx=\"-20\">he</text></g><g transform=\"translate(400,128.1818181818182)\"><text dx=\"-20\">looks</text></g><g transform=\"translate(452.85714285714283,128.1818181818182)\"><text dx=\"-20\">calm</text></g><g transform=\"translate(505.7142857142857,128.1818181818182)\"><text dx=\"-20\">and</text></g><g transform=\"translate(558.5714285714286,128.1818181818182)\"><text dx=\"-20\">ready</text></g><g transform=\"translate(611.4285714285714,128.1818181818182)\"><text dx=\"-20\">to</text></g><g transform=\"translate(664.2857142857143,128.1818181818182)\"><text dx=\"-20\">drop</text></g><g transform=\"translate(717.1428571428571,128.1818181818182)\"><text dx=\"-20\">bombs</text></g><g transform=\"translate(30,177.27272727272728)\"><text dx=\"-20\">but</text></g><g transform=\"translate(112.22222222222223,177.27272727272728)\"><text dx=\"-20\">he</text></g><g transform=\"translate(194.44444444444446,177.27272727272728)\"><text dx=\"-20\">keeps</text></g><g transform=\"translate(276.66666666666663,177.27272727272728)\"><text dx=\"-20\">on</text></g><g transform=\"translate(358.8888888888889,177.27272727272728)\"><text dx=\"-20\">forgetting</text></g><g transform=\"translate(441.1111111111111,177.27272727272728)\"><text dx=\"-20\">what</text></g><g transform=\"translate(523.3333333333333,177.27272727272728)\"><text dx=\"-20\">he</text></g><g transform=\"translate(605.5555555555555,177.27272727272728)\"><text dx=\"-20\">wrote</text></g><g transform=\"translate(687.7777777777778,177.27272727272728)\"><text dx=\"-20\">down</text></g><g transform=\"translate(30,226.36363636363637)\"><text dx=\"-20\">the</text></g><g transform=\"translate(153.33333333333331,226.36363636363637)\"><text dx=\"-20\">whole</text></g><g transform=\"translate(276.66666666666663,226.36363636363637)\"><text dx=\"-20\">crowd</text></g><g transform=\"translate(400,226.36363636363637)\"><text dx=\"-20\">goes</text></g><g transform=\"translate(523.3333333333333,226.36363636363637)\"><text dx=\"-20\">so</text></g><g transform=\"translate(646.6666666666666,226.36363636363637)\"><text dx=\"-20\">loud</text></g><g transform=\"translate(30,275.4545454545455)\"><text dx=\"-20\">he</text></g><g transform=\"translate(104,275.4545454545455)\"><text dx=\"-20\">opens</text></g><g transform=\"translate(178,275.4545454545455)\"><text dx=\"-20\">his</text></g><g transform=\"translate(252,275.4545454545455)\"><text dx=\"-20\">mouth</text></g><g transform=\"translate(326,275.4545454545455)\"><text dx=\"-20\">but</text></g><g transform=\"translate(400,275.4545454545455)\"><text dx=\"-20\">the</text></g><g transform=\"translate(474,275.4545454545455)\"><text dx=\"-20\">words</text></g><g transform=\"translate(548,275.4545454545455)\"><text dx=\"-20\">won't</text></g><g transform=\"translate(622,275.4545454545455)\"><text dx=\"-20\">come</text></g><g transform=\"translate(696,275.4545454545455)\"><text dx=\"-20\">out</text></g><g transform=\"translate(30,324.54545454545456)\"><text dx=\"-20\">he's</text></g><g transform=\"translate(153.33333333333331,324.54545454545456)\"><text dx=\"-20\">choking</text></g><g transform=\"translate(276.66666666666663,324.54545454545456)\"><text dx=\"-20\">how</text></g><g transform=\"translate(400,324.54545454545456)\"><text dx=\"-20\">everybody's</text></g><g transform=\"translate(523.3333333333333,324.54545454545456)\"><text dx=\"-20\">joking</text></g><g transform=\"translate(646.6666666666666,324.54545454545456)\"><text dx=\"-20\">now</text></g><g transform=\"translate(30,373.6363636363636)\"><text dx=\"-20\">the</text></g><g transform=\"translate(122.5,373.6363636363636)\"><text dx=\"-20\">clock's</text></g><g transform=\"translate(215,373.6363636363636)\"><text dx=\"-20\">run</text></g><g transform=\"translate(307.5,373.6363636363636)\"><text dx=\"-20\">out</text></g><g transform=\"translate(400,373.6363636363636)\"><text dx=\"-20\">time's</text></g><g transform=\"translate(492.5,373.6363636363636)\"><text dx=\"-20\">up</text></g><g transform=\"translate(585,373.6363636363636)\"><text dx=\"-20\">over</text></g><g transform=\"translate(677.5,373.6363636363636)\"><text dx=\"-20\">blaow</text></g><g transform=\"translate(30,422.72727272727275)\"><text dx=\"-20\">snap</text></g><g transform=\"translate(122.5,422.72727272727275)\"><text dx=\"-20\">back</text></g><g transform=\"translate(215,422.72727272727275)\"><text dx=\"-20\">to</text></g><g transform=\"translate(307.5,422.72727272727275)\"><text dx=\"-20\">reality</text></g><g transform=\"translate(400,422.72727272727275)\"><text dx=\"-20\">oh</text></g><g transform=\"translate(492.5,422.72727272727275)\"><text dx=\"-20\">there</text></g><g transform=\"translate(585,422.72727272727275)\"><text dx=\"-20\">goes</text></g><g transform=\"translate(677.5,422.72727272727275)\"><text dx=\"-20\">gravity</text></g><g transform=\"translate(30,471.8181818181818)\"><text dx=\"-20\">oh</text></g><g transform=\"translate(153.33333333333331,471.8181818181818)\"><text dx=\"-20\">there</text></g><g transform=\"translate(276.66666666666663,471.8181818181818)\"><text dx=\"-20\">goes</text></g><g transform=\"translate(400,471.8181818181818)\"><text dx=\"-20\">rabbit</text></g><g transform=\"translate(523.3333333333333,471.8181818181818)\"><text dx=\"-20\">he</text></g><g transform=\"translate(646.6666666666666,471.8181818181818)\"><text dx=\"-20\">choked</text></g><g transform=\"translate(30,520.909090909091)\"><text dx=\"-20\">he's</text></g><g transform=\"translate(112.22222222222223,520.909090909091)\"><text dx=\"-20\">so</text></g><g transform=\"translate(194.44444444444446,520.909090909091)\"><text dx=\"-20\">mad</text></g><g transform=\"translate(276.66666666666663,520.909090909091)\"><text dx=\"-20\">but</text></g><g transform=\"translate(358.8888888888889,520.909090909091)\"><text dx=\"-20\">he</text></g><g transform=\"translate(441.1111111111111,520.909090909091)\"><text dx=\"-20\">won't</text></g><g transform=\"translate(523.3333333333333,520.909090909091)\"><text dx=\"-20\">give</text></g><g transform=\"translate(605.5555555555555,520.909090909091)\"><text dx=\"-20\">up</text></g><g transform=\"translate(687.7777777777778,520.909090909091)\"><text dx=\"-20\">that</text></g><line style=\"stroke-width: 3; stroke: rgb(6, 120, 155);\" y2=\"79.0909090909091\" x2=\"307.5\" y1=\"30\" x1=\"30\"></line><line style=\"stroke-width: 4; stroke: rgb(6, 120, 155);\" y2=\"79.0909090909091\" x2=\"400\" y1=\"30\" x1=\"276.66666666666663\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"79.0909090909091\" x2=\"492.5\" y1=\"30\" x1=\"441.1111111111111\"></line><line style=\"stroke-width: 3; stroke: rgb(6, 120, 155);\" y2=\"79.0909090909091\" x2=\"585\" y1=\"30\" x1=\"523.3333333333333\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"128.1818181818182\" x2=\"135.71428571428572\" y1=\"79.0909090909091\" x1=\"122.5\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"128.1818181818182\" x2=\"400\" y1=\"79.0909090909091\" x1=\"400\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"128.1818181818182\" x2=\"30\" y1=\"79.0909090909091\" x1=\"30\"></line><line style=\"stroke-width: 4; stroke: rgb(6, 120, 155);\" y2=\"128.1818181818182\" x2=\"558.5714285714286\" y1=\"79.0909090909091\" x1=\"492.5\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"128.1818181818182\" x2=\"188.57142857142858\" y1=\"79.0909090909091\" x1=\"215\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"128.1818181818182\" x2=\"347.14285714285717\" y1=\"79.0909090909091\" x1=\"307.5\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"128.1818181818182\" x2=\"82.85714285714286\" y1=\"79.0909090909091\" x1=\"122.5\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"177.27272727272728\" x2=\"276.66666666666663\" y1=\"128.1818181818182\" x1=\"452.85714285714283\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"177.27272727272728\" x2=\"358.8888888888889\" y1=\"128.1818181818182\" x1=\"611.4285714285714\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"177.27272727272728\" x2=\"358.8888888888889\" y1=\"128.1818181818182\" x1=\"558.5714285714286\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"177.27272727272728\" x2=\"112.22222222222223\" y1=\"128.1818181818182\" x1=\"347.14285714285717\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"177.27272727272728\" x2=\"276.66666666666663\" y1=\"128.1818181818182\" x1=\"505.7142857142857\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"177.27272727272728\" x2=\"30\" y1=\"128.1818181818182\" x1=\"294.2857142857143\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"177.27272727272728\" x2=\"194.44444444444446\" y1=\"128.1818181818182\" x1=\"400\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"226.36363636363637\" x2=\"30\" y1=\"177.27272727272728\" x1=\"523.3333333333333\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"226.36363636363637\" x2=\"153.33333333333331\" y1=\"177.27272727272728\" x1=\"605.5555555555555\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"275.4545454545455\" x2=\"400\" y1=\"226.36363636363637\" x1=\"30\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"324.54545454545456\" x2=\"400\" y1=\"275.4545454545455\" x1=\"474\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"324.54545454545456\" x2=\"276.66666666666663\" y1=\"275.4545454545455\" x1=\"252\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"324.54545454545456\" x2=\"30\" y1=\"275.4545454545455\" x1=\"30\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"324.54545454545456\" x2=\"153.33333333333331\" y1=\"275.4545454545455\" x1=\"178\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"324.54545454545456\" x2=\"523.3333333333333\" y1=\"275.4545454545455\" x1=\"548\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"324.54545454545456\" x2=\"523.3333333333333\" y1=\"275.4545454545455\" x1=\"622\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"324.54545454545456\" x2=\"400\" y1=\"275.4545454545455\" x1=\"400\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"373.6363636363636\" x2=\"30\" y1=\"324.54545454545456\" x1=\"400\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"373.6363636363636\" x2=\"122.5\" y1=\"324.54545454545456\" x1=\"523.3333333333333\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"373.6363636363636\" x2=\"215\" y1=\"324.54545454545456\" x1=\"646.6666666666666\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"373.6363636363636\" x2=\"307.5\" y1=\"324.54545454545456\" x1=\"646.6666666666666\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"422.72727272727275\" x2=\"307.5\" y1=\"373.6363636363636\" x1=\"30\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"422.72727272727275\" x2=\"307.5\" y1=\"373.6363636363636\" x1=\"122.5\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"471.8181818181818\" x2=\"523.3333333333333\" y1=\"422.72727272727275\" x1=\"677.5\"></line><line style=\"stroke-width: 4; stroke: rgb(6, 120, 155);\" y2=\"471.8181818181818\" x2=\"400\" y1=\"422.72727272727275\" x1=\"677.5\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"471.8181818181818\" x2=\"30\" y1=\"422.72727272727275\" x1=\"400\"></line><line style=\"stroke-width: 3; stroke: rgb(6, 120, 155);\" y2=\"471.8181818181818\" x2=\"276.66666666666663\" y1=\"422.72727272727275\" x1=\"585\"></line><line style=\"stroke-width: 3; stroke: rgb(6, 120, 155);\" y2=\"471.8181818181818\" x2=\"153.33333333333331\" y1=\"422.72727272727275\" x1=\"492.5\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"520.909090909091\" x2=\"194.44444444444446\" y1=\"471.8181818181818\" x1=\"400\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"520.909090909091\" x2=\"358.8888888888889\" y1=\"471.8181818181818\" x1=\"523.3333333333333\"></line><line style=\"stroke-width: 2; stroke: rgb(6, 120, 155);\" y2=\"520.909090909091\" x2=\"441.1111111111111\" y1=\"471.8181818181818\" x1=\"646.6666666666666\"></line><line style=\"stroke-width: 1; stroke: rgb(6, 120, 155);\" y2=\"520.909090909091\" x2=\"112.22222222222223\" y1=\"471.8181818181818\" x1=\"276.66666666666663\"></line><line style=\"stroke-width: 3; stroke: rgb(6, 120, 155);\" y2=\"520.909090909091\" x2=\"276.66666666666663\" y1=\"471.8181818181818\" x1=\"400\"></line></svg></div>"
                },
                "selectedType": "BeakerDisplay",
                "elapsedTime": 0
            },
            "evaluatorReader": true,
            "lineCount": 12
        },
        {
            "id": "code2uVtKX",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "",
                    "// visualize words as nodes and words that rhyme in adjacent lines are connected by edges",
                    "var vis = d3.select(\"#graph\")",
                    "            .append(\"svg\");",
                    "",
                    "var width = 800,",
                    "    height= 600;",
                    "vis.attr(\"width\", width)",
                    "  .attr(\"height\", height);",
                    "var border = 30;",
                    "var maxwidth = width - 2*border,",
                    "    maxheight = height - 2*border;",
                    "",
                    "vis.text(\"Rap Analyzer\")",
                    "  .select(\"#graph\");",
                    "",
                    "// compute positions of words",
                    "var word_grid = beaker.words;",
                    "var node_pos = {}",
                    "var nodes = []",
                    "for (var i=0; i<word_grid.length; i++){",
                    "  for (var j=0; j<word_grid[i].length; j++){",
                    "    var xpos = border + j*maxwidth/word_grid[i].length;",
                    "    var ypos = border + i*maxheight/word_grid.length;",
                    "    var node_obj = {x: xpos, y: ypos, data:word_grid[i][j]};",
                    "    nodes.push(node_obj);",
                    "    node_pos[i+\",\"+j] = node_obj;",
                    "  }",
                    "}",
                    "",
                    "",
                    "var elem = vis.selectAll(\"g\")",
                    "  .data(nodes);",
                    "",
                    "var elemEnter = elem.enter()",
                    "  .append(\"g\")",
                    "  .attr(\"transform\", function(d) { return \"translate(\"+d.x+\",\"+d.y+\")\"})",
                    "",
                    "// var circle = elemEnter.append(\"circle\")",
                    "//   .attr(\"r\", \"15px\" )",
                    "//   .attr(\"stroke\", \"black\")",
                    "//   .attr(\"fill\", \"white\")",
                    "",
                    "elemEnter.append(\"text\")",
                    "  .attr(\"dx\", function(d){return -20})",
                    "  .text(function(d){return d.data})",
                    "",
                    "// vis.selectAll(\"circle.nodes\")",
                    "//   .data(nodes)",
                    "//   .enter()",
                    "//   .append(\"svg:circle\")",
                    "//   .attr(\"cx\", function(d) { return d.x; })",
                    "//   .attr(\"cy\", function(d) { return d.y; })",
                    "",
                    "// vis.selectAll(\"circle.nodes\")",
                    "//   .data(nodes)",
                    "//   .enter()",
                    "//   .append(\"svg:circle\")",
                    "//   .attr(\"cx\", function(d) { return d.x; })",
                    "//   .attr(\"cy\", function(d) { return d.y; })",
                    "//   .attr(\"r\", \"10px\")",
                    "//   .attr(\"fill\", \"black\")",
                    "",
                    "",
                    "// links",
                    "var rhymes = beaker.rhymes;",
                    "// list of list of (indexprev, indexcurr, weight)",
                    "var links = []",
                    "for (var i=0; i<rhymes.length; i++){",
                    "  for (var j=0; j<rhymes[i].length; j++){",
                    "    var src = node_pos[i+\",\"+rhymes[i][j][0]];",
                    "    var tgt = node_pos[(i+1)+\",\"+rhymes[i][j][1]];",
                    "    var wt = rhymes[i][j][2];",
                    "    links.push({source: src, target: tgt, weight: wt})",
                    "  }",
                    "}",
                    "",
                    "vis.selectAll(\".line\")",
                    "  .data(links)",
                    "  .enter()",
                    "  .append(\"line\")",
                    "  .attr(\"x1\", function(d) { return d.source.x })",
                    "  .attr(\"y1\", function(d) { return d.source.y })",
                    "  .attr(\"x2\", function(d) { return d.target.x })",
                    "  .attr(\"y2\", function(d) { return d.target.y })",
                    "  .style(\"stroke-width\", function(d) { return d.weight; })",
                    "  .style(\"stroke\", \"rgb(6,120,155)\");",
                    "",
                    "",
                    ""
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 80,
                "state": {},
                "result": "ERROR: circular objects are not supported",
                "pluginName": "JavaScript"
            },
            "evaluatorReader": true,
            "lineCount": 90
        },
        {
            "id": "markdown188oO3",
            "type": "markdown",
            "body": [
                "Beaker also supports JavaScript, Julia, Groovy, Ruby, Scala, Python3, Java, and Node. To add another language to this notebook, select **Notebook → Language manager** from the menu on top of the screen.",
                "",
                "For general help, see the tutorial notebook under **Help → Tutorial** notebook."
            ],
            "evaluatorReader": false,
            "mode": "preview"
        }
    ],
    "namespace": {
        "x": 3,
        "words": {
            "type": "TableDisplay",
            "values": [
                [
                    "his",
                    "palms",
                    "are",
                    "sweaty",
                    "knees",
                    "weak",
                    "arms",
                    "are",
                    "heavy"
                ],
                [
                    "there's",
                    "vomit",
                    "on",
                    "his",
                    "sweater",
                    "already",
                    "mom's",
                    "spaghetti"
                ],
                [
                    "he's",
                    "nervous",
                    "but",
                    "on",
                    "the",
                    "surface",
                    "he",
                    "looks",
                    "calm",
                    "and",
                    "ready",
                    "to",
                    "drop",
                    "bombs"
                ],
                [
                    "but",
                    "he",
                    "keeps",
                    "on",
                    "forgetting",
                    "what",
                    "he",
                    "wrote",
                    "down"
                ],
                [
                    "the",
                    "whole",
                    "crowd",
                    "goes",
                    "so",
                    "loud"
                ],
                [
                    "he",
                    "opens",
                    "his",
                    "mouth",
                    "but",
                    "the",
                    "words",
                    "won't",
                    "come",
                    "out"
                ],
                [
                    "he's",
                    "choking",
                    "how",
                    "everybody's",
                    "joking",
                    "now"
                ],
                [
                    "the",
                    "clock's",
                    "run",
                    "out",
                    "time's",
                    "up",
                    "over",
                    "blaow"
                ],
                [
                    "snap",
                    "back",
                    "to",
                    "reality",
                    "oh",
                    "there",
                    "goes",
                    "gravity"
                ],
                [
                    "oh",
                    "there",
                    "goes",
                    "rabbit",
                    "he",
                    "choked"
                ],
                [
                    "he's",
                    "so",
                    "mad",
                    "but",
                    "he",
                    "won't",
                    "give",
                    "up",
                    "that"
                ]
            ],
            "subtype": "Matrix",
            "columnNames": [
                "c0",
                "c1",
                "c2",
                "c3",
                "c4",
                "c5",
                "c6",
                "c7",
                "c8"
            ],
            "types": [
                "string",
                "string",
                "string",
                "string",
                "string",
                "string",
                "string",
                "string",
                "string"
            ]
        },
        "rhymes": [
            [
                [
                    0,
                    3,
                    3
                ],
                [
                    3,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    1
                ],
                [
                    6,
                    6,
                    3
                ]
            ],
            [
                [
                    1,
                    2,
                    2
                ],
                [
                    4,
                    7,
                    1
                ],
                [
                    0,
                    0,
                    1
                ],
                [
                    5,
                    10,
                    4
                ],
                [
                    2,
                    3,
                    2
                ],
                [
                    3,
                    6,
                    1
                ],
                [
                    1,
                    1,
                    1
                ]
            ],
            [
                [
                    8,
                    3,
                    1
                ],
                [
                    11,
                    4,
                    2
                ],
                [
                    10,
                    4,
                    2
                ],
                [
                    6,
                    1,
                    2
                ],
                [
                    9,
                    3,
                    1
                ],
                [
                    5,
                    0,
                    1
                ],
                [
                    7,
                    2,
                    2
                ]
            ],
            [
                [
                    6,
                    0,
                    1
                ],
                [
                    7,
                    1,
                    1
                ]
            ],
            [
                [
                    0,
                    5,
                    2
                ]
            ],
            [
                [
                    6,
                    3,
                    2
                ],
                [
                    3,
                    2,
                    1
                ],
                [
                    0,
                    0,
                    2
                ],
                [
                    2,
                    1,
                    1
                ],
                [
                    7,
                    4,
                    1
                ],
                [
                    8,
                    4,
                    1
                ],
                [
                    5,
                    3,
                    1
                ]
            ],
            [
                [
                    3,
                    0,
                    1
                ],
                [
                    4,
                    1,
                    1
                ],
                [
                    5,
                    2,
                    1
                ],
                [
                    5,
                    3,
                    1
                ]
            ],
            [
                [
                    0,
                    3,
                    1
                ],
                [
                    1,
                    3,
                    1
                ]
            ],
            [
                [
                    7,
                    4,
                    1
                ],
                [
                    7,
                    3,
                    4
                ],
                [
                    4,
                    0,
                    1
                ],
                [
                    6,
                    2,
                    3
                ],
                [
                    5,
                    1,
                    3
                ]
            ],
            [
                [
                    3,
                    2,
                    1
                ],
                [
                    4,
                    4,
                    2
                ],
                [
                    5,
                    5,
                    2
                ],
                [
                    2,
                    1,
                    1
                ],
                [
                    3,
                    3,
                    3
                ]
            ]
        ]
    }
}
