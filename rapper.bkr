{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            },
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n"
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "RapGraph",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "code001",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "from nltk.corpus import cmudict",
                    "_DEBUG_ = True",
                    "# the basis of rhyme",
                    "transcr = cmudict.dict()",
                    "_NULL_ = '_NULL_'",
                    "phs = 'AA AE AH AO AW AY B CH D DH EH ER EY F G HH IH\\",
                    "    IY JH K L M N NG OW OY P R S SH T TH UH UW V W Y Z'.split()",
                    "phs_vowels = set('AA AE AH AO AW AY EH ER EY IH IY OW OY UH UW'.split())",
                    "    ",
                    "",
                    "def tokenizeVerse(verse):",
                    "    # preprocessing",
                    "    verse = verse.strip().lower()",
                    "    # remove all symbols except letters, space, apostrophe",
                    "    accepted_chars = set('abcdefghijklmnopqrstuvwxyz \\'\\n')",
                    "    verse = ''.join(filter(accepted_chars.__contains__, verse))",
                    "    # separate string into lines",
                    "    lines = verse.split('\\n')",
                    "",
                    "    vocab = set()",
                    "    # build nested tokenized string",
                    "    verse_nested = []",
                    "    for line in lines:",
                    "        # separate each line into words",
                    "        words = line.split()",
                    "        verse_nested.append(words)",
                    "        # add word into vocabulary",
                    "        for word in words:",
                    "            vocab.add(word)",
                    "    return verse_nested, vocab",
                    "",
                    "",
                    "def phonemes(words):",
                    "    phonemes = {}",
                    "    for word in words:",
                    "        # get possible pronunciations from dict",
                    "        possible_pronunciations =  transcr.get(word, [[_NULL_]])",
                    "        if word not in transcr:",
                    "            # TODO: generate a guess on the pronunciation",
                    "            pass",
                    "        # strip out emphasis on vowels",
                    "        for pronunciation in possible_pronunciations:",
                    "            for i in range(len(pronunciation)):",
                    "                pronunciation[i] = ''.join(c for c in pronunciation[i] if not c.isdigit())",
                    "        # remove repeats",
                    "        possible_pronunciations = list(set([tuple(p) for p in possible_pronunciations]))",
                    "        phonemes[word] = possible_pronunciations",
                    "    return phonemes",
                    "",
                    "",
                    "def allPhonemePermutations(line, phoneme_dict, pos=0):",
                    "    if pos >= len(line):",
                    "        return []",
                    "    else:",
                    "        tail_permutations = allPhonemePermutations(line, phoneme_dict, pos+1)",
                    "        # cons all possible head word pronunciations",
                    "        all_permutations = []",
                    "        ",
                    "        # helpful DEBUG warning message",
                    "        if _DEBUG_ and len(phoneme_dict[line[pos]]) > 2:",
                    "               print \"Many Pronunciations Warning: \" + line[pos]",
                    "               print phoneme_dict[line[pos]]",
                    "        ",
                    "        for head_pronunciation in phoneme_dict[line[pos]]:",
                    "            # tag each phoneme with their word for later reconstruction",
                    "            head = [(phoneme, pos) for phoneme in head_pronunciation]",
                    "            if tail_permutations:",
                    "                for tail in tail_permutations:",
                    "                    all_permutations.append(head + tail)",
                    "            else:",
                    "                all_permutations.append(head)",
                    "        return all_permutations",
                    "",
                    "def phonemeSimilarity(ph_a, ph_b):",
                    "    # Heuristic phoneme rhyming similarity in range [0, 1]    ",
                    "    relative_score = 0.",
                    "    if ph_a == _NULL_ or ph_b == _NULL_:",
                    "        return 0.",
                    "    if ph_a == ph_b:",
                    "        # rhyme",
                    "        relative_score = 1.",
                    "    elif ph_a in phs_vowels:",
                    "        if ph_b in phs_vowels:",
                    "            # both vowels, likely to rhyme",
                    "            relative_score = 0.3",
                    "    elif ph_b not in phs_vowels:",
                    "        # both consonants, could help rhyme",
                    "        relative_score = 0.05",
                    "    return relative_score",
                    "    ",
                    "    ",
                    "",
                    "def alignPhonemeSequences(a_seq, b_seq):",
                    "    # Smith-Waterman alignment with custom phoneme similarity scoring",
                    "    GAP_PENALTY = -1.",
                    "    MIN_SCORE = -10.",
                    "    MAX_SCORE = 10.",
                    "    score_range = MAX_SCORE - MIN_SCORE",
                    "    ",
                    "    width = len(a_seq)+1",
                    "    height = len(b_seq)+1",
                    "    H = [[0] * width for i in range(height)]",
                    "",
                    "    # Run the DP alg",
                    "    for row in range(1,height):",
                    "        for col in range(1,width):",
                    "            relative_score = phonemeSimilarity(a_seq[col-1], b_seq[row-1])",
                    "            align = H[row-1][col-1] + relative_score * score_range + MIN_SCORE",
                    "            deletion = H[row-1][col] + GAP_PENALTY",
                    "            insertion = H[row][col-1] + GAP_PENALTY",
                    "            H[row][col] = max(0, align, deletion, insertion)",
                    "",
                    "    # extract the solution",
                    "    # find max value in H",
                    "    max_value = 0",
                    "    max_row = None",
                    "    max_col = None",
                    "    for row in range(height):",
                    "        for col in range(width):",
                    "            if H[row][col] >= max_value:",
                    "                max_value = H[row][col]",
                    "                max_row = row",
                    "                max_col = col",
                    "    # find path up/left/upleft",
                    "    # upleft = align (need to check if match or mismatch)",
                    "    # up = deletion in a_seq",
                    "    # left = insertion in a_seq",
                    "    alignment = []",
                    "    while max_row > 0 and max_col > 0:",
                    "        corner = H[max_row-1][max_col-1]",
                    "        up = H[max_row-1][max_col]",
                    "        left = H[max_row][max_col-1]",
                    "        ",
                    "        if left>corner and left>up:",
                    "            max_col -= 1",
                    "        elif up>corner and up>left:",
                    "            max_row -= 1",
                    "        else: # corner>up and corner>left",
                    "            max_row -= 1",
                    "            max_col -= 1",
                    "            if phonemeSimilarity(a_seq[max_col], b_seq[max_row]) > 0.5:",
                    "                alignment.append((max_col, max_row))",
                    "        ",
                    "    return max_value, alignment",
                    "",
                    "",
                    "def alignRhyme(line_a, line_b, phoneme_dict):",
                    "    # get all possible ways to pronounce the line",
                    "    possible_a_seqs = allPhonemePermutations(line_a, phoneme_dict)",
                    "    possible_b_seqs = allPhonemePermutations(line_b, phoneme_dict)",
                    "    # select best alignment of these permutations",
                    "    max_score = float('-inf')",
                    "    best_alignment = []",
                    "    best_a = None",
                    "    best_b = None",
                    "    for a_seq in possible_a_seqs:",
                    "        for b_seq in possible_b_seqs:",
                    "            score, alignment = alignPhonemeSequences([p[0] for p in a_seq], [p[0] for p in b_seq])",
                    "            if score >= max_score:",
                    "                max_score = score",
                    "                best_alignment = alignment",
                    "                best_a = a_seq",
                    "                best_b = b_seq",
                    "    # convert from alignment between phonemes to alignment between words",
                    "    rhyme_alignment = {}",
                    "    for (i_a, i_b) in best_alignment:",
                    "        i_word_a = best_a[i_a][1]",
                    "        i_word_b = best_b[i_b][1]",
                    "        word_pair = (i_word_a, i_word_b)",
                    "        if word_pair not in rhyme_alignment:",
                    "            rhyme_alignment[word_pair] = 0",
                    "        rhyme_alignment[word_pair] += 1",
                    "    rhyme_alignment = [(pair[0], pair[1], rhyme_alignment[pair]) for pair in rhyme_alignment]",
                    "    return rhyme_alignment",
                    "",
                    "",
                    "def wordLinks(verse):",
                    "    verse_nested, vocab = tokenizeVerse(verse)",
                    "    phoneme_dict = phonemes(vocab)",
                    "    # get build rhyming graph: words=nodes, rhymes=edges",
                    "    word_links = []",
                    "    if len(verse_nested) > 1:",
                    "        prev_line = verse_nested[0]",
                    "        for i in range(1, len(verse_nested)):",
                    "            curr_line = verse_nested[i]",
                    "            # get rhyme alignment for these two lines",
                    "            rhyme_alignment = alignRhyme(prev_line, curr_line, phoneme_dict)",
                    "            word_links.append(rhyme_alignment)",
                    "            # shift for next iteration",
                    "            prev_line = curr_line",
                    "        ",
                    "    return verse_nested, word_links, phoneme_dict",
                    "",
                    "def inlineRhyme(line, phoneme_dict):",
                    "    # greedy forward pass",
                    "    links = []",
                    "    for pos in range(len(line)-1):",
                    "        word = line[pos]",
                    "        # note that this method doesnt capture all multiword rhymes",
                    "        # we can capture a little more if we also do a backward pass",
                    "        alignment = alignRhyme([word], line[pos+1:], phoneme_dict)",
                    "        links += [(pos_a+pos, pos_b+pos+1,wt) for (pos_a, pos_b, wt) in alignment if wt > 1]",
                    "    return links",
                    "",
                    "def analyzeRap(verse):",
                    "    # get rhyme graph",
                    "    verse_nested, word_links, phoneme_dict = wordLinks(verse)",
                    "    inline_links = [inlineRhyme(line, phoneme_dict) for line in verse_nested]",
                    "    # save to beaker",
                    "    beaker.words = verse_nested # list of list of words",
                    "    beaker.rhymes = word_links # list of list of (wordindex, wordindex, multiplicity)",
                    "    beaker.inlines = inline_links # list of list of (wordindex, wordindex, weight)",
                    "    return",
                    "",
                    "# rap here",
                    "nicki = \"\"\"",
                    "I said, excuse me, you're a hell of a guy",
                    "I mean my, my, my, my you're like pelican fly",
                    "I mean, you're so shy and I'm loving your tie",
                    "You're like slicker than the guy with the thing on his eye, oh",
                    "Yes I did, yes I did, somebody please tell him who the F I is",
                    "I am Nicki Minaj, I mack them dudes up, back coupes up, and chuck the deuce up",
                    "\"\"\"",
                    "",
                    "eminem = \"\"\"",
                    "His palms are sweaty, knees weak, arms are heavy",
                    "There's vomit on his sweater already, mom's spaghetti",
                    "He's nervous, but on the surface he looks calm and ready to drop bombs,",
                    "But he keeps on forgetting what he wrote down,",
                    "The whole crowd goes so loud",
                    "He opens his mouth, but the words won't come out",
                    "He's choking how, everybody's joking now",
                    "The clock's run out, time's up, over, blaow!",
                    "Snap back to reality. Oh, there goes gravity",
                    "Oh, there goes Rabbit, he choked",
                    "He's so mad, but he won't give up that",
                    "\"\"\"",
                    "",
                    "",
                    "analyzeRap(nicki)",
                    ""
                ]
            },
            "output": {
                "selectedType": "Hidden",
                "outputArrived": true,
                "elapsedTime": 9611,
                "state": {},
                "pluginName": "IPython",
                "shellId": "990C66F9DAE8419288BB5705EE32B19A",
                "dataresult": 3
            },
            "evaluatorReader": true,
            "lineCount": 241
        },
        {
            "id": "codemuKi0Q",
            "type": "code",
            "evaluator": "Html",
            "input": {
                "body": [
                    "<style>",
                    ".node {",
                    "  stroke: #fff;",
                    "  stroke-width: 1.5px;",
                    "}",
                    "",
                    ".link {",
                    "  stroke: #999;",
                    "  stroke-opacity: .6;",
                    "}",
                    "</style>",
                    "<div id=\"graph\"></div>"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<script>\nvar beaker = bkHelper.getBeakerObject().beakerObj;\n</script>\n<style>\n.node {\n  stroke: #fff;\n  stroke-width: 1.5px;\n}\n\n.link {\n  stroke: #999;\n  stroke-opacity: .6;\n}\n</style>\n<div id=\"graph\"><svg height=\"1000\" width=\"800\">Rap Analyzer<g transform=\"translate(60,60)\"><text font-size=\"15px\" dx=\"-20\">i</text></g><g transform=\"translate(128,60)\"><text font-size=\"15px\" dx=\"-20\">said</text></g><g transform=\"translate(196,60)\"><text font-size=\"15px\" dx=\"-20\">excuse</text></g><g transform=\"translate(264,60)\"><text font-size=\"15px\" dx=\"-20\">me</text></g><g transform=\"translate(332,60)\"><text font-size=\"15px\" dx=\"-20\">you're</text></g><g transform=\"translate(400,60)\"><text font-size=\"15px\" dx=\"-20\">a</text></g><g transform=\"translate(468,60)\"><text font-size=\"15px\" dx=\"-20\">hell</text></g><g transform=\"translate(536,60)\"><text font-size=\"15px\" dx=\"-20\">of</text></g><g transform=\"translate(604,60)\"><text font-size=\"15px\" dx=\"-20\">a</text></g><g transform=\"translate(672,60)\"><text font-size=\"15px\" dx=\"-20\">guy</text></g><g transform=\"translate(60,206.66666666666666)\"><text font-size=\"15px\" dx=\"-20\">i</text></g><g transform=\"translate(128,206.66666666666666)\"><text font-size=\"15px\" dx=\"-20\">mean</text></g><g transform=\"translate(196,206.66666666666666)\"><text font-size=\"15px\" dx=\"-20\">my</text></g><g transform=\"translate(264,206.66666666666666)\"><text font-size=\"15px\" dx=\"-20\">my</text></g><g transform=\"translate(332,206.66666666666666)\"><text font-size=\"15px\" dx=\"-20\">my</text></g><g transform=\"translate(400,206.66666666666666)\"><text font-size=\"15px\" dx=\"-20\">my</text></g><g transform=\"translate(468,206.66666666666666)\"><text font-size=\"15px\" dx=\"-20\">you're</text></g><g transform=\"translate(536,206.66666666666666)\"><text font-size=\"15px\" dx=\"-20\">like</text></g><g transform=\"translate(604,206.66666666666666)\"><text font-size=\"15px\" dx=\"-20\">pelican</text></g><g transform=\"translate(672,206.66666666666666)\"><text font-size=\"15px\" dx=\"-20\">fly</text></g><g transform=\"translate(60,353.3333333333333)\"><text font-size=\"15px\" dx=\"-20\">i</text></g><g transform=\"translate(128,353.3333333333333)\"><text font-size=\"15px\" dx=\"-20\">mean</text></g><g transform=\"translate(196,353.3333333333333)\"><text font-size=\"15px\" dx=\"-20\">you're</text></g><g transform=\"translate(264,353.3333333333333)\"><text font-size=\"15px\" dx=\"-20\">so</text></g><g transform=\"translate(332,353.3333333333333)\"><text font-size=\"15px\" dx=\"-20\">shy</text></g><g transform=\"translate(400,353.3333333333333)\"><text font-size=\"15px\" dx=\"-20\">and</text></g><g transform=\"translate(468,353.3333333333333)\"><text font-size=\"15px\" dx=\"-20\">i'm</text></g><g transform=\"translate(536,353.3333333333333)\"><text font-size=\"15px\" dx=\"-20\">loving</text></g><g transform=\"translate(604,353.3333333333333)\"><text font-size=\"15px\" dx=\"-20\">your</text></g><g transform=\"translate(672,353.3333333333333)\"><text font-size=\"15px\" dx=\"-20\">tie</text></g><g transform=\"translate(60,500)\"><text font-size=\"15px\" dx=\"-20\">you're</text></g><g transform=\"translate(112.3076923076923,500)\"><text font-size=\"15px\" dx=\"-20\">like</text></g><g transform=\"translate(164.6153846153846,500)\"><text font-size=\"15px\" dx=\"-20\">slicker</text></g><g transform=\"translate(216.92307692307693,500)\"><text font-size=\"15px\" dx=\"-20\">than</text></g><g transform=\"translate(269.2307692307692,500)\"><text font-size=\"15px\" dx=\"-20\">the</text></g><g transform=\"translate(321.53846153846155,500)\"><text font-size=\"15px\" dx=\"-20\">guy</text></g><g transform=\"translate(373.84615384615387,500)\"><text font-size=\"15px\" dx=\"-20\">with</text></g><g transform=\"translate(426.15384615384613,500)\"><text font-size=\"15px\" dx=\"-20\">the</text></g><g transform=\"translate(478.46153846153845,500)\"><text font-size=\"15px\" dx=\"-20\">thing</text></g><g transform=\"translate(530.7692307692307,500)\"><text font-size=\"15px\" dx=\"-20\">on</text></g><g transform=\"translate(583.0769230769231,500)\"><text font-size=\"15px\" dx=\"-20\">his</text></g><g transform=\"translate(635.3846153846154,500)\"><text font-size=\"15px\" dx=\"-20\">eye</text></g><g transform=\"translate(687.6923076923077,500)\"><text font-size=\"15px\" dx=\"-20\">oh</text></g><g transform=\"translate(60,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">yes</text></g><g transform=\"translate(105.33333333333334,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">i</text></g><g transform=\"translate(150.66666666666669,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">did</text></g><g transform=\"translate(196,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">yes</text></g><g transform=\"translate(241.33333333333334,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">i</text></g><g transform=\"translate(286.66666666666663,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">did</text></g><g transform=\"translate(332,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">somebody</text></g><g transform=\"translate(377.3333333333333,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">please</text></g><g transform=\"translate(422.6666666666667,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">tell</text></g><g transform=\"translate(468,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">him</text></g><g transform=\"translate(513.3333333333333,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">who</text></g><g transform=\"translate(558.6666666666667,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">the</text></g><g transform=\"translate(604,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">f</text></g><g transform=\"translate(649.3333333333334,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">i</text></g><g transform=\"translate(694.6666666666666,646.6666666666666)\"><text font-size=\"15px\" dx=\"-20\">is</text></g><g transform=\"translate(60,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">i</text></g><g transform=\"translate(100,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">am</text></g><g transform=\"translate(140,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">nicki</text></g><g transform=\"translate(180,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">minaj</text></g><g transform=\"translate(220,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">i</text></g><g transform=\"translate(260,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">mack</text></g><g transform=\"translate(300,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">them</text></g><g transform=\"translate(340,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">dudes</text></g><g transform=\"translate(380,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">up</text></g><g transform=\"translate(420,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">back</text></g><g transform=\"translate(460,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">coupes</text></g><g transform=\"translate(500,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">up</text></g><g transform=\"translate(540,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">and</text></g><g transform=\"translate(580,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">chuck</text></g><g transform=\"translate(620,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">the</text></g><g transform=\"translate(660,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">deuce</text></g><g transform=\"translate(700,793.3333333333334)\"><text font-size=\"15px\" dx=\"-20\">up</text></g><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"206.66666666666666\" x2=\"60\" y1=\"60\" x1=\"60\"></line><line style=\"stroke-width: 5.19615; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"206.66666666666666\" x2=\"468\" y1=\"60\" x1=\"332\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"206.66666666666666\" x2=\"128\" y1=\"60\" x1=\"264\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"206.66666666666666\" x2=\"672\" y1=\"60\" x1=\"672\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"206.66666666666666\" x2=\"604\" y1=\"60\" x1=\"604\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"206.66666666666666\" x2=\"604\" y1=\"60\" x1=\"536\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"206.66666666666666\" x2=\"604\" y1=\"60\" x1=\"468\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"353.3333333333333\" x2=\"60\" y1=\"206.66666666666666\" x1=\"60\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"353.3333333333333\" x2=\"672\" y1=\"206.66666666666666\" x1=\"672\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"353.3333333333333\" x2=\"332\" y1=\"206.66666666666666\" x1=\"536\"></line><line style=\"stroke-width: 5.19615; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"353.3333333333333\" x2=\"196\" y1=\"206.66666666666666\" x1=\"468\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"353.3333333333333\" x2=\"400\" y1=\"206.66666666666666\" x1=\"604\"></line><line style=\"stroke-width: 5.19615; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"353.3333333333333\" x2=\"128\" y1=\"206.66666666666666\" x1=\"128\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"353.3333333333333\" x2=\"536\" y1=\"206.66666666666666\" x1=\"672\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"500\" x2=\"164.6153846153846\" y1=\"353.3333333333333\" x1=\"264\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"500\" x2=\"426.15384615384613\" y1=\"353.3333333333333\" x1=\"536\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"500\" x2=\"530.7692307692307\" y1=\"353.3333333333333\" x1=\"604\"></line><line style=\"stroke-width: 5.19615; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"500\" x2=\"60\" y1=\"353.3333333333333\" x1=\"196\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"500\" x2=\"635.3846153846154\" y1=\"353.3333333333333\" x1=\"672\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"500\" x2=\"478.46153846153845\" y1=\"353.3333333333333\" x1=\"536\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"500\" x2=\"321.53846153846155\" y1=\"353.3333333333333\" x1=\"468\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"500\" x2=\"216.92307692307693\" y1=\"353.3333333333333\" x1=\"400\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"646.6666666666666\" x2=\"377.3333333333333\" y1=\"500\" x1=\"164.6153846153846\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"646.6666666666666\" x2=\"60\" y1=\"500\" x1=\"60\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"646.6666666666666\" x2=\"468\" y1=\"500\" x1=\"164.6153846153846\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"646.6666666666666\" x2=\"558.6666666666667\" y1=\"500\" x1=\"216.92307692307693\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"646.6666666666666\" x2=\"649.3333333333334\" y1=\"500\" x1=\"321.53846153846155\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"646.6666666666666\" x2=\"694.6666666666666\" y1=\"500\" x1=\"583.0769230769231\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"646.6666666666666\" x2=\"196\" y1=\"500\" x1=\"164.6153846153846\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"646.6666666666666\" x2=\"105.33333333333334\" y1=\"500\" x1=\"112.3076923076923\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"646.6666666666666\" x2=\"558.6666666666667\" y1=\"500\" x1=\"269.2307692307692\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"646.6666666666666\" x2=\"694.6666666666666\" y1=\"500\" x1=\"373.84615384615387\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"700\" y1=\"646.6666666666666\" x1=\"558.6666666666667\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"340\" y1=\"646.6666666666666\" x1=\"150.66666666666669\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"420\" y1=\"646.6666666666666\" x1=\"332\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"380\" y1=\"646.6666666666666\" x1=\"332\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"500\" y1=\"646.6666666666666\" x1=\"332\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"340\" y1=\"646.6666666666666\" x1=\"286.66666666666663\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"660\" y1=\"646.6666666666666\" x1=\"513.3333333333333\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"340\" y1=\"646.6666666666666\" x1=\"196\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"540\" y1=\"646.6666666666666\" x1=\"332\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"60\" y1=\"646.6666666666666\" x1=\"105.33333333333334\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"793.3333333333334\" x2=\"620\" y1=\"646.6666666666666\" x1=\"332\"></line><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M196,60A136,136 0 0,1 332,60\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M196,206.66666666666666A68,68 0 0,1 264,206.66666666666666\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M264,206.66666666666666A68,68 0 0,1 332,206.66666666666666\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M332,206.66666666666666A68,68 0 0,1 400,206.66666666666666\"></path><path style=\"stroke-width: 3; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M196,353.3333333333333A408,408 0 0,1 604,353.3333333333333\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M112.3076923076923,500A52.30769230769231,52.30769230769231 0 0,1 164.6153846153846,500\"></path><path style=\"stroke-width: 3; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M60,646.6666666666666A136,136 0 0,1 196,646.6666666666666\"></path><path style=\"stroke-width: 3; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M150.66666666666669,646.6666666666666A135.99999999999994,135.99999999999994 0 0,1 286.66666666666663,646.6666666666666\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M100,793.3333333333334A200,200 0 0,1 300,793.3333333333334\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M260,793.3333333333334A160,160 0 0,1 420,793.3333333333334\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M300,793.3333333333334A320,320 0 0,1 620,793.3333333333334\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M460,793.3333333333334A200,200 0 0,1 660,793.3333333333334\"></path></svg></div>"
                },
                "selectedType": "BeakerDisplay",
                "elapsedTime": 0
            },
            "evaluatorReader": true,
            "lineCount": 12
        },
        {
            "id": "code2uVtKX",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "",
                    "// visualize words as nodes and words that rhyme in adjacent lines are connected by edges",
                    "var vis = d3.select(\"#graph\")",
                    "            .append(\"svg\");",
                    "",
                    "var width = 800,",
                    "    height= 1000;",
                    "vis.attr(\"width\", width)",
                    "  .attr(\"height\", height);",
                    "var border = 60;",
                    "var maxwidth = width - 2*border,",
                    "    maxheight = height - 2*border;",
                    "",
                    "vis.text(\"Rap Analyzer\")",
                    "  .select(\"#graph\");",
                    "",
                    "// compute positions of words",
                    "var word_grid = beaker.words;",
                    "var node_pos = {}",
                    "var nodes = []",
                    "",
                    "var max_row_length = 0;",
                    "for (var i=0; i<word_grid.length; i++){",
                    "  if (word_grid[i].length >= max_row_length){",
                    "    max_row_length = word_grid[i].length;",
                    "  }",
                    "}",
                    "",
                    "for (var i=0; i<word_grid.length; i++){",
                    "  for (var j=0; j<word_grid[i].length; j++){",
                    "    var xpos = border + j*maxwidth/word_grid[i].length;",
                    "//     var xpos = border + j*maxwidth/max_row_length;",
                    "    var ypos = border + i*maxheight/word_grid.length;",
                    "    var node_obj = {x: xpos, y: ypos, data:word_grid[i][j]};",
                    "    nodes.push(node_obj);",
                    "    node_pos[i+\",\"+j] = node_obj;",
                    "  }",
                    "}",
                    "",
                    "",
                    "var elem = vis.selectAll(\"g\")",
                    "  .data(nodes);",
                    "",
                    "var elemEnter = elem.enter()",
                    "  .append(\"g\")",
                    "  .attr(\"transform\", function(d) { return \"translate(\"+d.x+\",\"+d.y+\")\"})",
                    "",
                    "",
                    "elemEnter.append(\"text\")",
                    "  .attr(\"dx\", function(d){return -20})",
                    "  .attr(\"font-size\", \"15px\")",
                    "  .text(function(d){return d.data})",
                    "",
                    "",
                    "// rhyme links",
                    "var rhymes = beaker.rhymes;",
                    "// list of list of (indexprev, indexcurr, weight)",
                    "var links = []",
                    "for (var i=0; i<rhymes.length; i++){",
                    "  for (var j=0; j<rhymes[i].length; j++){",
                    "    var src = node_pos[i+\",\"+rhymes[i][j][0]];",
                    "    var tgt = node_pos[(i+1)+\",\"+rhymes[i][j][1]];",
                    "    // emphasize high multiplicity connections",
                    "    var wt = Math.pow(rhymes[i][j][2], 1.5);",
                    "    links.push({source: src, target: tgt, weight: wt})",
                    "  }",
                    "}",
                    "",
                    "vis.selectAll(\".line\")",
                    "  .data(links)",
                    "  .enter()",
                    "  .append(\"line\")",
                    "  .attr(\"x1\", function(d) { return d.source.x })",
                    "  .attr(\"y1\", function(d) { return d.source.y })",
                    "  .attr(\"x2\", function(d) { return d.target.x })",
                    "  .attr(\"y2\", function(d) { return d.target.y })",
                    "  .style(\"stroke-width\", function(d) { return d.weight; })",
                    "  .style(\"opacity\", \"0.7\")",
                    "  .style(\"stroke\", \"rgb(6,120,155)\");",
                    "",
                    "",
                    "",
                    "// inline rhyme links",
                    "var inlines = beaker.inlines;",
                    "// list of list of (index, index, weight)",
                    "var inline_links = []",
                    "for (var i=0; i<inlines.length; i++){",
                    "  for (var j=0; j<inlines[i].length; j++){",
                    "    var src = node_pos[i+\",\"+inlines[i][j][0]];",
                    "    var tgt = node_pos[i+\",\"+inlines[i][j][1]];",
                    "    var wt = inlines[i][j][2];",
                    "    inline_links.push({source: src, target: tgt, weight: wt});",
                    "  }",
                    "}",
                    "",
                    "vis.selectAll(\".inline\")",
                    "  .data(inline_links)",
                    "  .enter()",
                    "  .append(\"path\")",
                    "  .attr(\"d\", function(d) {",
                    "    // curved link",
                    "    var dx = d.target.x - d.source.x,",
                    "        dy = d.target.y - d.source.y,",
                    "        dr = Math.sqrt(dx * dx + dy * dy);",
                    "    return \"M\" + d.source.x + \",\" + d.source.y + \"A\" + dr + \",\" + dr + \" 0 0,1 \" + d.target.x + \",\" + d.target.y;",
                    "  })",
                    "  .style(\"stroke-width\", function(d) { return d.weight; })",
                    "  .style(\"fill\", \"none\")",
                    "  .style(\"opacity\", \"0.7\")",
                    "  .style(\"stroke\", \"rgb(255,179,0)\");",
                    "",
                    ""
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 60,
                "state": {},
                "result": "ERROR: circular objects are not supported",
                "pluginName": "JavaScript"
            },
            "evaluatorReader": true,
            "lineCount": 112
        },
        {
            "id": "markdown188oO3",
            "type": "markdown",
            "body": [
                "Beaker also supports JavaScript, Julia, Groovy, Ruby, Scala, Python3, Java, and Node. To add another language to this notebook, select **Notebook → Language manager** from the menu on top of the screen.",
                "",
                "For general help, see the tutorial notebook under **Help → Tutorial** notebook."
            ],
            "evaluatorReader": false,
            "mode": "preview"
        }
    ],
    "namespace": {
        "x": 3,
        "words": {
            "type": "TableDisplay",
            "values": [
                [
                    "i",
                    "said",
                    "excuse",
                    "me",
                    "you're",
                    "a",
                    "hell",
                    "of",
                    "a",
                    "guy"
                ],
                [
                    "i",
                    "mean",
                    "my",
                    "my",
                    "my",
                    "my",
                    "you're",
                    "like",
                    "pelican",
                    "fly"
                ],
                [
                    "i",
                    "mean",
                    "you're",
                    "so",
                    "shy",
                    "and",
                    "i'm",
                    "loving",
                    "your",
                    "tie"
                ],
                [
                    "you're",
                    "like",
                    "slicker",
                    "than",
                    "the",
                    "guy",
                    "with",
                    "the",
                    "thing",
                    "on",
                    "his",
                    "eye",
                    "oh"
                ],
                [
                    "yes",
                    "i",
                    "did",
                    "yes",
                    "i",
                    "did",
                    "somebody",
                    "please",
                    "tell",
                    "him",
                    "who",
                    "the",
                    "f",
                    "i",
                    "is"
                ],
                [
                    "i",
                    "am",
                    "nicki",
                    "minaj",
                    "i",
                    "mack",
                    "them",
                    "dudes",
                    "up",
                    "back",
                    "coupes",
                    "up",
                    "and",
                    "chuck",
                    "the",
                    "deuce",
                    "up"
                ]
            ],
            "subtype": "Matrix",
            "columnNames": [
                "c0",
                "c1",
                "c2",
                "c3",
                "c4",
                "c5",
                "c6",
                "c7",
                "c8",
                "c9"
            ],
            "types": [
                "string",
                "string",
                "string",
                "string",
                "string",
                "string",
                "string",
                "string",
                "string",
                "string"
            ]
        },
        "rhymes": [
            [
                [
                    0,
                    0,
                    1
                ],
                [
                    4,
                    6,
                    3
                ],
                [
                    3,
                    1,
                    2
                ],
                [
                    9,
                    9,
                    1
                ],
                [
                    8,
                    8,
                    1
                ],
                [
                    7,
                    8,
                    1
                ],
                [
                    6,
                    8,
                    2
                ]
            ],
            [
                [
                    0,
                    0,
                    1
                ],
                [
                    9,
                    9,
                    1
                ],
                [
                    7,
                    4,
                    1
                ],
                [
                    6,
                    2,
                    3
                ],
                [
                    8,
                    5,
                    2
                ],
                [
                    1,
                    1,
                    3
                ],
                [
                    9,
                    7,
                    1
                ]
            ],
            [
                [
                    3,
                    2,
                    1
                ],
                [
                    7,
                    7,
                    1
                ],
                [
                    8,
                    9,
                    1
                ],
                [
                    2,
                    0,
                    3
                ],
                [
                    9,
                    11,
                    1
                ],
                [
                    7,
                    8,
                    2
                ],
                [
                    6,
                    5,
                    1
                ],
                [
                    5,
                    3,
                    2
                ]
            ],
            [
                [
                    2,
                    7,
                    1
                ],
                [
                    0,
                    0,
                    1
                ],
                [
                    2,
                    9,
                    1
                ],
                [
                    3,
                    11,
                    1
                ],
                [
                    5,
                    13,
                    1
                ],
                [
                    10,
                    14,
                    1
                ],
                [
                    2,
                    3,
                    1
                ],
                [
                    1,
                    1,
                    1
                ],
                [
                    4,
                    11,
                    1
                ],
                [
                    6,
                    14,
                    1
                ]
            ],
            [
                [
                    11,
                    16,
                    1
                ],
                [
                    2,
                    7,
                    1
                ],
                [
                    6,
                    9,
                    1
                ],
                [
                    6,
                    8,
                    1
                ],
                [
                    6,
                    11,
                    1
                ],
                [
                    5,
                    7,
                    1
                ],
                [
                    10,
                    15,
                    1
                ],
                [
                    3,
                    7,
                    1
                ],
                [
                    6,
                    12,
                    1
                ],
                [
                    1,
                    0,
                    1
                ],
                [
                    6,
                    14,
                    1
                ]
            ]
        ],
        "inline": [
            [
                [
                    1,
                    2,
                    1
                ],
                [
                    6,
                    7,
                    1
                ],
                [
                    4,
                    6,
                    1
                ],
                [
                    4,
                    4,
                    1
                ],
                [
                    8,
                    9,
                    1
                ],
                [
                    8,
                    8,
                    1
                ],
                [
                    7,
                    8,
                    1
                ],
                [
                    2,
                    4,
                    1
                ]
            ],
            [
                [
                    1,
                    2,
                    1
                ],
                [
                    5,
                    7,
                    1
                ],
                [
                    3,
                    3,
                    1
                ],
                [
                    4,
                    5,
                    1
                ],
                [
                    7,
                    8,
                    1
                ],
                [
                    4,
                    4,
                    1
                ],
                [
                    9,
                    9,
                    1
                ],
                [
                    8,
                    9,
                    1
                ],
                [
                    8,
                    8,
                    1
                ],
                [
                    2,
                    3,
                    1
                ],
                [
                    2,
                    2,
                    1
                ],
                [
                    3,
                    4,
                    1
                ],
                [
                    5,
                    5,
                    1
                ]
            ],
            [
                [
                    6,
                    7,
                    1
                ],
                [
                    6,
                    6,
                    1
                ],
                [
                    4,
                    5,
                    1
                ],
                [
                    9,
                    9,
                    1
                ],
                [
                    5,
                    6,
                    1
                ],
                [
                    8,
                    8,
                    2
                ],
                [
                    0,
                    4,
                    1
                ],
                [
                    7,
                    8,
                    1
                ]
            ],
            [
                [
                    1,
                    2,
                    1
                ],
                [
                    6,
                    7,
                    1
                ],
                [
                    6,
                    6,
                    1
                ],
                [
                    4,
                    5,
                    1
                ],
                [
                    4,
                    4,
                    1
                ],
                [
                    7,
                    7,
                    2
                ],
                [
                    8,
                    9,
                    1
                ],
                [
                    5,
                    6,
                    1
                ],
                [
                    8,
                    8,
                    1
                ],
                [
                    0,
                    10,
                    1
                ],
                [
                    10,
                    11,
                    1
                ],
                [
                    7,
                    8,
                    1
                ],
                [
                    2,
                    4,
                    1
                ]
            ]
        ],
        "inlines": [
            [
                [
                    2,
                    4,
                    2
                ]
            ],
            [
                [
                    2,
                    3,
                    2
                ],
                [
                    3,
                    4,
                    2
                ],
                [
                    4,
                    5,
                    2
                ]
            ],
            [
                [
                    2,
                    8,
                    3
                ]
            ],
            [
                [
                    1,
                    2,
                    2
                ]
            ],
            [
                [
                    0,
                    3,
                    3
                ],
                [
                    2,
                    5,
                    3
                ]
            ],
            [
                [
                    1,
                    6,
                    2
                ],
                [
                    5,
                    9,
                    2
                ],
                [
                    6,
                    14,
                    2
                ],
                [
                    10,
                    15,
                    2
                ]
            ]
        ]
    }
}
