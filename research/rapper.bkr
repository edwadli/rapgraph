{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            },
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n"
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "markdowngNHLpO",
            "type": "markdown",
            "body": [
                ""
            ],
            "evaluatorReader": false
        },
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "RapGraph",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "code001",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "from nltk.corpus import cmudict",
                    "_DEBUG_ = True",
                    "# the basis of rhyme",
                    "transcr = cmudict.dict()",
                    "_NULL_ = '_NULL_'",
                    "phs = 'AA AE AH AO AW AY B CH D DH EH ER EY F G HH IH\\",
                    "    IY JH K L M N NG OW OY P R S SH T TH UH UW V W Y Z'.split()",
                    "phs_vowels = set('AA AE AH AO AW AY EH ER EY IH IY OW OY UH UW'.split())",
                    "",
                    "",
                    "def tokenizeVerse(verse):",
                    "    # preprocessing",
                    "    verse = verse.strip().lower()",
                    "    # remove all symbols except letters, space, apostrophe",
                    "    accepted_chars = set('abcdefghijklmnopqrstuvwxyz \\'\\n')",
                    "    verse = ''.join(filter(accepted_chars.__contains__, verse))",
                    "    # separate string into lines",
                    "    lines = verse.split('\\n')",
                    "",
                    "    vocab = set()",
                    "    # build nested tokenized string",
                    "    verse_nested = []",
                    "    for line in lines:",
                    "        # separate each line into words",
                    "        words = line.split()",
                    "        verse_nested.append(words)",
                    "        # add word into vocabulary",
                    "        for word in words:",
                    "            vocab.add(word)",
                    "    return verse_nested, vocab",
                    "",
                    "",
                    "def phonemes(words):",
                    "    phonemes = {}",
                    "    for word in words:",
                    "        # get possible pronunciations from dict",
                    "        possible_pronunciations =  transcr.get(word, [[_NULL_]])",
                    "        if word not in transcr:",
                    "            # TODO: generate a guess on the pronunciation",
                    "            pass",
                    "        # strip out emphasis on vowels",
                    "        for pronunciation in possible_pronunciations:",
                    "            for i in range(len(pronunciation)):",
                    "                pronunciation[i] = ''.join(c for c in pronunciation[i] if not c.isdigit())",
                    "        # remove repeats",
                    "        possible_pronunciations = list(set([tuple(p) for p in possible_pronunciations]))",
                    "        phonemes[word] = possible_pronunciations",
                    "    return phonemes",
                    "",
                    "",
                    "def allPhonemePermutations(line, phoneme_dict, pos=0):",
                    "    if pos >= len(line):",
                    "        return []",
                    "    else:",
                    "        tail_permutations = allPhonemePermutations(line, phoneme_dict, pos+1)",
                    "        # cons all possible head word pronunciations",
                    "        all_permutations = []",
                    "        ",
                    "        # helpful DEBUG warning message",
                    "        if _DEBUG_ and len(phoneme_dict[line[pos]]) > 2:",
                    "               print \"Many Pronunciations Warning: \" + line[pos]",
                    "               print phoneme_dict[line[pos]]",
                    "        ",
                    "        for head_pronunciation in phoneme_dict[line[pos]]:",
                    "            # tag each phoneme with their word for later reconstruction",
                    "            head = [(phoneme, pos) for phoneme in head_pronunciation]",
                    "            if tail_permutations:",
                    "                for tail in tail_permutations:",
                    "                    all_permutations.append(head + tail)",
                    "            else:",
                    "                all_permutations.append(head)",
                    "        return all_permutations",
                    "",
                    "def phonemeSimilarity(ph_a, ph_b):",
                    "    # Heuristic phoneme rhyming similarity in range [0, 1]    ",
                    "    relative_score = 0.",
                    "    if ph_a == _NULL_ or ph_b == _NULL_:",
                    "        return 0.",
                    "    if ph_a == ph_b:",
                    "        # rhyme",
                    "        relative_score = 1.",
                    "    elif ph_a in phs_vowels:",
                    "        if ph_b in phs_vowels:",
                    "            # both vowels, likely to rhyme",
                    "            relative_score = 0.3",
                    "    elif ph_b not in phs_vowels:",
                    "        # both consonants, could help rhyme",
                    "        relative_score = 0.05",
                    "    return relative_score",
                    "    ",
                    "    ",
                    "",
                    "def alignPhonemeSequences(a_seq, b_seq):",
                    "    # Smith-Waterman alignment with custom phoneme similarity scoring",
                    "    GAP_PENALTY = -1.",
                    "    MIN_SCORE = -10.",
                    "    MAX_SCORE = 10.",
                    "    score_range = MAX_SCORE - MIN_SCORE",
                    "    ",
                    "    width = len(a_seq)+1",
                    "    height = len(b_seq)+1",
                    "    H = [[0] * width for i in range(height)]",
                    "",
                    "    # Run the DP alg",
                    "    for row in range(1,height):",
                    "        for col in range(1,width):",
                    "            relative_score = phonemeSimilarity(a_seq[col-1], b_seq[row-1])",
                    "            align = H[row-1][col-1] + relative_score * score_range + MIN_SCORE",
                    "            deletion = H[row-1][col] + GAP_PENALTY",
                    "            insertion = H[row][col-1] + GAP_PENALTY",
                    "            H[row][col] = max(0, align, deletion, insertion)",
                    "",
                    "    # extract the solution",
                    "    # find max value in H",
                    "    max_value = 0",
                    "    max_row = None",
                    "    max_col = None",
                    "    for row in range(height):",
                    "        for col in range(width):",
                    "            if H[row][col] >= max_value:",
                    "                max_value = H[row][col]",
                    "                max_row = row",
                    "                max_col = col",
                    "    # find path up/left/upleft",
                    "    # upleft = align (need to check if match or mismatch)",
                    "    # up = deletion in a_seq",
                    "    # left = insertion in a_seq",
                    "    alignment = []",
                    "    while max_row > 0 and max_col > 0:",
                    "        corner = H[max_row-1][max_col-1]",
                    "        up = H[max_row-1][max_col]",
                    "        left = H[max_row][max_col-1]",
                    "        ",
                    "        if left>corner and left>up:",
                    "            max_col -= 1",
                    "        elif up>corner and up>left:",
                    "            max_row -= 1",
                    "        else: # corner>up and corner>left",
                    "            max_row -= 1",
                    "            max_col -= 1",
                    "            if phonemeSimilarity(a_seq[max_col], b_seq[max_row]) > 0.5:",
                    "                alignment.append((max_col, max_row))",
                    "        ",
                    "    return max_value, alignment",
                    "",
                    "",
                    "def alignRhyme(line_a, line_b, phoneme_dict):",
                    "    # get all possible ways to pronounce the line",
                    "    possible_a_seqs = allPhonemePermutations(line_a, phoneme_dict)",
                    "    possible_b_seqs = allPhonemePermutations(line_b, phoneme_dict)",
                    "    # select best alignment of these permutations",
                    "    max_score = float('-inf')",
                    "    best_alignment = []",
                    "    best_a = None",
                    "    best_b = None",
                    "    for a_seq in possible_a_seqs:",
                    "        for b_seq in possible_b_seqs:",
                    "            score, alignment = alignPhonemeSequences([p[0] for p in a_seq], [p[0] for p in b_seq])",
                    "            if score >= max_score:",
                    "                max_score = score",
                    "                best_alignment = alignment",
                    "                best_a = a_seq",
                    "                best_b = b_seq",
                    "    # convert from alignment between phonemes to alignment between words",
                    "    rhyme_alignment = {}",
                    "    for (i_a, i_b) in best_alignment:",
                    "        i_word_a = best_a[i_a][1]",
                    "        i_word_b = best_b[i_b][1]",
                    "        word_pair = (i_word_a, i_word_b)",
                    "        if word_pair not in rhyme_alignment:",
                    "            rhyme_alignment[word_pair] = 0",
                    "        rhyme_alignment[word_pair] += 1",
                    "    rhyme_alignment = [(pair[0], pair[1], rhyme_alignment[pair]) for pair in rhyme_alignment]",
                    "    return rhyme_alignment",
                    "",
                    "",
                    "def wordLinks(verse):",
                    "    verse_nested, vocab = tokenizeVerse(verse)",
                    "    phoneme_dict = phonemes(vocab)",
                    "    # get build rhyming graph: words=nodes, rhymes=edges",
                    "    word_links = []",
                    "    if len(verse_nested) > 1:",
                    "        prev_line = verse_nested[0]",
                    "        for i in range(1, len(verse_nested)):",
                    "            curr_line = verse_nested[i]",
                    "            # get rhyme alignment for these two lines",
                    "            rhyme_alignment = alignRhyme(prev_line, curr_line, phoneme_dict)",
                    "            word_links.append(rhyme_alignment)",
                    "            # shift for next iteration",
                    "            prev_line = curr_line",
                    "        ",
                    "    return verse_nested, word_links, phoneme_dict",
                    "",
                    "def inlineRhyme(line, phoneme_dict):",
                    "    # greedy forward pass",
                    "    links = []",
                    "    for pos in range(len(line)-1):",
                    "        word = line[pos]",
                    "        # note that this method doesnt capture all multiword rhymes",
                    "        # we can capture a little more if we also do a backward pass",
                    "        alignment = alignRhyme([word], line[pos+1:], phoneme_dict)",
                    "        links += [(pos_a+pos, pos_b+pos+1,wt) for (pos_a, pos_b, wt) in alignment if wt > 1]",
                    "    return links",
                    "",
                    "def analyzeRap(verse):",
                    "    # get rhyme graph",
                    "    verse_nested, word_links, phoneme_dict = wordLinks(verse)",
                    "    inline_links = [inlineRhyme(line, phoneme_dict) for line in verse_nested]",
                    "    # save to beaker",
                    "    beaker.words = verse_nested # list of list of words",
                    "    beaker.rhymes = word_links # list of list of (wordindex, wordindex, multiplicity)",
                    "    beaker.inlines = inline_links # list of list of (wordindex, wordindex, weight)",
                    "    return",
                    "",
                    "# rap here",
                    "nicki = \"\"\"",
                    "I said, excuse me, you're a hell of a guy",
                    "I mean my, my, my, my you're like pelican fly",
                    "I mean, you're so shy and I'm loving your tie",
                    "You're like slicker than the guy with the thing on his eye, oh",
                    "Yes I did, yes I did, somebody please tell him who the F I is",
                    "I am Nicki Minaj, I mack them dudes up, back coupes up, and chuck the deuce up",
                    "\"\"\"",
                    "",
                    "eminem = \"\"\"",
                    "His palms are sweaty, knees weak, arms are heavy",
                    "There's vomit on his sweater already, mom's spaghetti",
                    "He's nervous, but on the surface he looks calm and ready to drop bombs,",
                    "But he keeps on forgetting what he wrote down,",
                    "The whole crowd goes so loud",
                    "He opens his mouth, but the words won't come out",
                    "He's choking how, everybody's joking now",
                    "The clock's run out, time's up, over, blaow!",
                    "Snap back to reality. Oh, there goes gravity",
                    "Oh, there goes Rabbit, he choked",
                    "He's so mad, but he won't give up that",
                    "\"\"\"",
                    "",
                    "",
                    "analyzeRap(eminem)",
                    ""
                ]
            },
            "output": {
                "selectedType": "Results",
                "outputArrived": true,
                "elapsedTime": 12893,
                "state": {},
                "pluginName": "IPython",
                "shellId": "67AA85B4FAE0492B81BC492BE1C48F39",
                "dataresult": 3,
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "Many Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to"
                        },
                        {
                            "type": "out",
                            "value": "\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to"
                        },
                        {
                            "type": "out",
                            "value": "\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to"
                        },
                        {
                            "type": "out",
                            "value": "\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to"
                        },
                        {
                            "type": "out",
                            "value": "\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to"
                        },
                        {
                            "type": "out",
                            "value": "\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\nMany Pronunciations Warning: to\n[(u'T', u'IH'), (u'T', u'UW'), (u'T', u'AH')]\n"
                        }
                    ]
                },
                "hidden": true
            },
            "evaluatorReader": true,
            "lineCount": 241
        },
        {
            "id": "codemuKi0Q",
            "type": "code",
            "evaluator": "Html",
            "input": {
                "body": [
                    "<style>",
                    "",
                    "</style>",
                    "<div id=\"graph\"></div>"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<script>\nvar beaker = bkHelper.getBeakerObject().beakerObj;\n</script>\n<style>\n\n</style>\n<div id=\"graph\"><svg height=\"1000\" width=\"800\"><g transform=\"translate(60,60)\"><text font-size=\"15px\" dx=\"-20\">his</text></g><g transform=\"translate(135.55555555555554,60)\"><text font-size=\"15px\" dx=\"-20\">palms</text></g><g transform=\"translate(211.11111111111111,60)\"><text font-size=\"15px\" dx=\"-20\">are</text></g><g transform=\"translate(286.66666666666663,60)\"><text font-size=\"15px\" dx=\"-20\">sweaty</text></g><g transform=\"translate(362.22222222222223,60)\"><text font-size=\"15px\" dx=\"-20\">knees</text></g><g transform=\"translate(437.77777777777777,60)\"><text font-size=\"15px\" dx=\"-20\">weak</text></g><g transform=\"translate(513.3333333333333,60)\"><text font-size=\"15px\" dx=\"-20\">arms</text></g><g transform=\"translate(588.8888888888889,60)\"><text font-size=\"15px\" dx=\"-20\">are</text></g><g transform=\"translate(664.4444444444445,60)\"><text font-size=\"15px\" dx=\"-20\">heavy</text></g><g transform=\"translate(60,140)\"><text font-size=\"15px\" dx=\"-20\">there's</text></g><g transform=\"translate(145,140)\"><text font-size=\"15px\" dx=\"-20\">vomit</text></g><g transform=\"translate(230,140)\"><text font-size=\"15px\" dx=\"-20\">on</text></g><g transform=\"translate(315,140)\"><text font-size=\"15px\" dx=\"-20\">his</text></g><g transform=\"translate(400,140)\"><text font-size=\"15px\" dx=\"-20\">sweater</text></g><g transform=\"translate(485,140)\"><text font-size=\"15px\" dx=\"-20\">already</text></g><g transform=\"translate(570,140)\"><text font-size=\"15px\" dx=\"-20\">mom's</text></g><g transform=\"translate(655,140)\"><text font-size=\"15px\" dx=\"-20\">spaghetti</text></g><g transform=\"translate(60,220)\"><text font-size=\"15px\" dx=\"-20\">he's</text></g><g transform=\"translate(108.57142857142857,220)\"><text font-size=\"15px\" dx=\"-20\">nervous</text></g><g transform=\"translate(157.14285714285714,220)\"><text font-size=\"15px\" dx=\"-20\">but</text></g><g transform=\"translate(205.71428571428572,220)\"><text font-size=\"15px\" dx=\"-20\">on</text></g><g transform=\"translate(254.28571428571428,220)\"><text font-size=\"15px\" dx=\"-20\">the</text></g><g transform=\"translate(302.8571428571429,220)\"><text font-size=\"15px\" dx=\"-20\">surface</text></g><g transform=\"translate(351.42857142857144,220)\"><text font-size=\"15px\" dx=\"-20\">he</text></g><g transform=\"translate(400,220)\"><text font-size=\"15px\" dx=\"-20\">looks</text></g><g transform=\"translate(448.57142857142856,220)\"><text font-size=\"15px\" dx=\"-20\">calm</text></g><g transform=\"translate(497.14285714285717,220)\"><text font-size=\"15px\" dx=\"-20\">and</text></g><g transform=\"translate(545.7142857142858,220)\"><text font-size=\"15px\" dx=\"-20\">ready</text></g><g transform=\"translate(594.2857142857143,220)\"><text font-size=\"15px\" dx=\"-20\">to</text></g><g transform=\"translate(642.8571428571429,220)\"><text font-size=\"15px\" dx=\"-20\">drop</text></g><g transform=\"translate(691.4285714285714,220)\"><text font-size=\"15px\" dx=\"-20\">bombs</text></g><g transform=\"translate(60,300)\"><text font-size=\"15px\" dx=\"-20\">but</text></g><g transform=\"translate(135.55555555555554,300)\"><text font-size=\"15px\" dx=\"-20\">he</text></g><g transform=\"translate(211.11111111111111,300)\"><text font-size=\"15px\" dx=\"-20\">keeps</text></g><g transform=\"translate(286.66666666666663,300)\"><text font-size=\"15px\" dx=\"-20\">on</text></g><g transform=\"translate(362.22222222222223,300)\"><text font-size=\"15px\" dx=\"-20\">forgetting</text></g><g transform=\"translate(437.77777777777777,300)\"><text font-size=\"15px\" dx=\"-20\">what</text></g><g transform=\"translate(513.3333333333333,300)\"><text font-size=\"15px\" dx=\"-20\">he</text></g><g transform=\"translate(588.8888888888889,300)\"><text font-size=\"15px\" dx=\"-20\">wrote</text></g><g transform=\"translate(664.4444444444445,300)\"><text font-size=\"15px\" dx=\"-20\">down</text></g><g transform=\"translate(60,380)\"><text font-size=\"15px\" dx=\"-20\">the</text></g><g transform=\"translate(173.33333333333331,380)\"><text font-size=\"15px\" dx=\"-20\">whole</text></g><g transform=\"translate(286.66666666666663,380)\"><text font-size=\"15px\" dx=\"-20\">crowd</text></g><g transform=\"translate(400,380)\"><text font-size=\"15px\" dx=\"-20\">goes</text></g><g transform=\"translate(513.3333333333333,380)\"><text font-size=\"15px\" dx=\"-20\">so</text></g><g transform=\"translate(626.6666666666666,380)\"><text font-size=\"15px\" dx=\"-20\">loud</text></g><g transform=\"translate(60,460)\"><text font-size=\"15px\" dx=\"-20\">he</text></g><g transform=\"translate(128,460)\"><text font-size=\"15px\" dx=\"-20\">opens</text></g><g transform=\"translate(196,460)\"><text font-size=\"15px\" dx=\"-20\">his</text></g><g transform=\"translate(264,460)\"><text font-size=\"15px\" dx=\"-20\">mouth</text></g><g transform=\"translate(332,460)\"><text font-size=\"15px\" dx=\"-20\">but</text></g><g transform=\"translate(400,460)\"><text font-size=\"15px\" dx=\"-20\">the</text></g><g transform=\"translate(468,460)\"><text font-size=\"15px\" dx=\"-20\">words</text></g><g transform=\"translate(536,460)\"><text font-size=\"15px\" dx=\"-20\">won't</text></g><g transform=\"translate(604,460)\"><text font-size=\"15px\" dx=\"-20\">come</text></g><g transform=\"translate(672,460)\"><text font-size=\"15px\" dx=\"-20\">out</text></g><g transform=\"translate(60,540)\"><text font-size=\"15px\" dx=\"-20\">he's</text></g><g transform=\"translate(173.33333333333331,540)\"><text font-size=\"15px\" dx=\"-20\">choking</text></g><g transform=\"translate(286.66666666666663,540)\"><text font-size=\"15px\" dx=\"-20\">how</text></g><g transform=\"translate(400,540)\"><text font-size=\"15px\" dx=\"-20\">everybody's</text></g><g transform=\"translate(513.3333333333333,540)\"><text font-size=\"15px\" dx=\"-20\">joking</text></g><g transform=\"translate(626.6666666666666,540)\"><text font-size=\"15px\" dx=\"-20\">now</text></g><g transform=\"translate(60,620)\"><text font-size=\"15px\" dx=\"-20\">the</text></g><g transform=\"translate(145,620)\"><text font-size=\"15px\" dx=\"-20\">clock's</text></g><g transform=\"translate(230,620)\"><text font-size=\"15px\" dx=\"-20\">run</text></g><g transform=\"translate(315,620)\"><text font-size=\"15px\" dx=\"-20\">out</text></g><g transform=\"translate(400,620)\"><text font-size=\"15px\" dx=\"-20\">time's</text></g><g transform=\"translate(485,620)\"><text font-size=\"15px\" dx=\"-20\">up</text></g><g transform=\"translate(570,620)\"><text font-size=\"15px\" dx=\"-20\">over</text></g><g transform=\"translate(655,620)\"><text font-size=\"15px\" dx=\"-20\">blaow</text></g><g transform=\"translate(60,700)\"><text font-size=\"15px\" dx=\"-20\">snap</text></g><g transform=\"translate(145,700)\"><text font-size=\"15px\" dx=\"-20\">back</text></g><g transform=\"translate(230,700)\"><text font-size=\"15px\" dx=\"-20\">to</text></g><g transform=\"translate(315,700)\"><text font-size=\"15px\" dx=\"-20\">reality</text></g><g transform=\"translate(400,700)\"><text font-size=\"15px\" dx=\"-20\">oh</text></g><g transform=\"translate(485,700)\"><text font-size=\"15px\" dx=\"-20\">there</text></g><g transform=\"translate(570,700)\"><text font-size=\"15px\" dx=\"-20\">goes</text></g><g transform=\"translate(655,700)\"><text font-size=\"15px\" dx=\"-20\">gravity</text></g><g transform=\"translate(60,780)\"><text font-size=\"15px\" dx=\"-20\">oh</text></g><g transform=\"translate(173.33333333333331,780)\"><text font-size=\"15px\" dx=\"-20\">there</text></g><g transform=\"translate(286.66666666666663,780)\"><text font-size=\"15px\" dx=\"-20\">goes</text></g><g transform=\"translate(400,780)\"><text font-size=\"15px\" dx=\"-20\">rabbit</text></g><g transform=\"translate(513.3333333333333,780)\"><text font-size=\"15px\" dx=\"-20\">he</text></g><g transform=\"translate(626.6666666666666,780)\"><text font-size=\"15px\" dx=\"-20\">choked</text></g><g transform=\"translate(60,860)\"><text font-size=\"15px\" dx=\"-20\">he's</text></g><g transform=\"translate(135.55555555555554,860)\"><text font-size=\"15px\" dx=\"-20\">so</text></g><g transform=\"translate(211.11111111111111,860)\"><text font-size=\"15px\" dx=\"-20\">mad</text></g><g transform=\"translate(286.66666666666663,860)\"><text font-size=\"15px\" dx=\"-20\">but</text></g><g transform=\"translate(362.22222222222223,860)\"><text font-size=\"15px\" dx=\"-20\">he</text></g><g transform=\"translate(437.77777777777777,860)\"><text font-size=\"15px\" dx=\"-20\">won't</text></g><g transform=\"translate(513.3333333333333,860)\"><text font-size=\"15px\" dx=\"-20\">give</text></g><g transform=\"translate(588.8888888888889,860)\"><text font-size=\"15px\" dx=\"-20\">up</text></g><g transform=\"translate(664.4444444444445,860)\"><text font-size=\"15px\" dx=\"-20\">that</text></g><line style=\"stroke-width: 5.19615; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"140\" x2=\"315\" y1=\"60\" x1=\"60\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"140\" x2=\"485\" y1=\"60\" x1=\"286.66666666666663\"></line><line style=\"stroke-width: 8; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"140\" x2=\"400\" y1=\"60\" x1=\"286.66666666666663\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"140\" x2=\"655\" y1=\"60\" x1=\"664.4444444444445\"></line><line style=\"stroke-width: 5.19615; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"140\" x2=\"570\" y1=\"60\" x1=\"513.3333333333333\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"220\" x2=\"157.14285714285714\" y1=\"140\" x1=\"145\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"220\" x2=\"60\" y1=\"140\" x1=\"60\"></line><line style=\"stroke-width: 8; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"220\" x2=\"545.7142857142858\" y1=\"140\" x1=\"485\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"220\" x2=\"302.8571428571429\" y1=\"140\" x1=\"400\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"220\" x2=\"400\" y1=\"140\" x1=\"485\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"220\" x2=\"205.71428571428572\" y1=\"140\" x1=\"230\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"220\" x2=\"691.4285714285714\" y1=\"140\" x1=\"570\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"220\" x2=\"642.8571428571429\" y1=\"140\" x1=\"570\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"220\" x2=\"108.57142857142857\" y1=\"140\" x1=\"145\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"300\" x2=\"286.66666666666663\" y1=\"220\" x1=\"448.57142857142856\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"300\" x2=\"362.22222222222223\" y1=\"220\" x1=\"594.2857142857143\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"300\" x2=\"362.22222222222223\" y1=\"220\" x1=\"545.7142857142858\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"300\" x2=\"437.77777777777777\" y1=\"220\" x1=\"594.2857142857143\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"300\" x2=\"588.8888888888889\" y1=\"220\" x1=\"642.8571428571429\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"300\" x2=\"286.66666666666663\" y1=\"220\" x1=\"497.14285714285717\"></line><line style=\"stroke-width: 5.19615; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"300\" x2=\"60\" y1=\"220\" x1=\"157.14285714285714\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"300\" x2=\"135.55555555555554\" y1=\"220\" x1=\"351.42857142857144\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"300\" x2=\"211.11111111111111\" y1=\"220\" x1=\"400\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"380\" x2=\"400\" y1=\"300\" x1=\"588.8888888888889\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"380\" x2=\"60\" y1=\"300\" x1=\"60\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"380\" x2=\"400\" y1=\"300\" x1=\"362.22222222222223\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"380\" x2=\"286.66666666666663\" y1=\"300\" x1=\"211.11111111111111\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"380\" x2=\"286.66666666666663\" y1=\"300\" x1=\"362.22222222222223\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"380\" x2=\"626.6666666666666\" y1=\"300\" x1=\"664.4444444444445\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"380\" x2=\"173.33333333333331\" y1=\"300\" x1=\"135.55555555555554\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"460\" x2=\"196\" y1=\"380\" x1=\"173.33333333333331\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"460\" x2=\"672\" y1=\"380\" x1=\"626.6666666666666\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"460\" x2=\"536\" y1=\"380\" x1=\"513.3333333333333\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"460\" x2=\"468\" y1=\"380\" x1=\"286.66666666666663\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"460\" x2=\"264\" y1=\"380\" x1=\"286.66666666666663\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"460\" x2=\"468\" y1=\"380\" x1=\"400\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"460\" x2=\"128\" y1=\"380\" x1=\"60\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"540\" x2=\"400\" y1=\"460\" x1=\"468\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"540\" x2=\"286.66666666666663\" y1=\"460\" x1=\"264\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"540\" x2=\"60\" y1=\"460\" x1=\"60\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"540\" x2=\"173.33333333333331\" y1=\"460\" x1=\"196\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"540\" x2=\"513.3333333333333\" y1=\"460\" x1=\"536\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"540\" x2=\"626.6666666666666\" y1=\"460\" x1=\"672\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"540\" x2=\"513.3333333333333\" y1=\"460\" x1=\"604\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"620\" x2=\"60\" y1=\"540\" x1=\"400\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"620\" x2=\"145\" y1=\"540\" x1=\"513.3333333333333\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"620\" x2=\"230\" y1=\"540\" x1=\"626.6666666666666\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"620\" x2=\"315\" y1=\"540\" x1=\"626.6666666666666\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"700\" x2=\"145\" y1=\"620\" x1=\"145\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"700\" x2=\"655\" y1=\"620\" x1=\"485\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"700\" x2=\"315\" y1=\"620\" x1=\"230\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"700\" x2=\"570\" y1=\"620\" x1=\"400\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"700\" x2=\"315\" y1=\"620\" x1=\"315\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"780\" x2=\"513.3333333333333\" y1=\"700\" x1=\"655\"></line><line style=\"stroke-width: 8; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"780\" x2=\"400\" y1=\"700\" x1=\"655\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"780\" x2=\"60\" y1=\"700\" x1=\"400\"></line><line style=\"stroke-width: 5.19615; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"780\" x2=\"286.66666666666663\" y1=\"700\" x1=\"570\"></line><line style=\"stroke-width: 5.19615; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"780\" x2=\"173.33333333333331\" y1=\"700\" x1=\"485\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"860\" x2=\"135.55555555555554\" y1=\"780\" x1=\"60\"></line><line style=\"stroke-width: 1; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"860\" x2=\"211.11111111111111\" y1=\"780\" x1=\"400\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"860\" x2=\"362.22222222222223\" y1=\"780\" x1=\"513.3333333333333\"></line><line style=\"stroke-width: 2.82843; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"860\" x2=\"437.77777777777777\" y1=\"780\" x1=\"626.6666666666666\"></line><line style=\"stroke-width: 5.19615; opacity: 0.7; stroke: rgb(6, 120, 155);\" y2=\"860\" x2=\"286.66666666666663\" y1=\"780\" x1=\"400\"></line><path style=\"stroke-width: 3; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M135.55555555555554,60A377.7777777777777,377.7777777777777 0 0,1 513.3333333333333,60\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M211.11111111111111,60A302.2222222222222,302.2222222222222 0 0,1 513.3333333333333,60\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M286.66666666666663,60A377.7777777777778,377.7777777777778 0 0,1 664.4444444444445,60\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M513.3333333333333,60A75.55555555555566,75.55555555555566 0 0,1 588.8888888888889,60\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M145,140A510,510 0 0,1 655,140\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M145,140A425,425 0 0,1 570,140\"></path><path style=\"stroke-width: 3; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M400,140A255,255 0 0,1 655,140\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M485,140A170,170 0 0,1 655,140\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M60,220A291.42857142857144,291.42857142857144 0 0,1 351.42857142857144,220\"></path><path style=\"stroke-width: 3; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M108.57142857142857,220A194.28571428571433,194.28571428571433 0 0,1 302.8571428571429,220\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M60,300A377.77777777777777,377.77777777777777 0 0,1 437.77777777777777,300\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M362.22222222222223,300A226.66666666666669,226.66666666666669 0 0,1 588.8888888888889,300\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M286.66666666666663,380A340,340 0 0,1 626.6666666666666,380\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M128,460A408,408 0 0,1 536,460\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M60,540A340,340 0 0,1 400,540\"></path><path style=\"stroke-width: 4; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M173.33333333333331,540A339.99999999999994,339.99999999999994 0 0,1 513.3333333333333,540\"></path><path style=\"stroke-width: 4; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M315,700A340,340 0 0,1 655,700\"></path><path style=\"stroke-width: 2; fill: none; opacity: 0.7; stroke: rgb(255, 179, 0);\" d=\"M60,860A302.22222222222223,302.22222222222223 0 0,1 362.22222222222223,860\"></path></svg></div>"
                },
                "selectedType": "BeakerDisplay",
                "elapsedTime": 0
            },
            "evaluatorReader": true,
            "lineCount": 4
        },
        {
            "id": "code2uVtKX",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "// visualize words as nodes and words that rhyme in adjacent lines are connected by edges",
                    "d3.select(\"#graph\").selectAll(\"*\").remove();",
                    "",
                    "var vis = d3.select(\"#graph\")",
                    "            .append(\"svg\");",
                    "",
                    "var width = 800,",
                    "    height= 1000;",
                    "vis.attr(\"width\", width)",
                    "  .attr(\"height\", height);",
                    "var border = 60;",
                    "var maxwidth = width - 2*border,",
                    "    maxheight = height - 2*border;",
                    "",
                    "// compute positions of words",
                    "var word_grid = beaker.words;",
                    "var node_pos = {}",
                    "var nodes = []",
                    "",
                    "var max_row_length = 0;",
                    "for (var i=0; i<word_grid.length; i++){",
                    "  if (word_grid[i].length >= max_row_length){",
                    "    max_row_length = word_grid[i].length;",
                    "  }",
                    "}",
                    "",
                    "for (var i=0; i<word_grid.length; i++){",
                    "  for (var j=0; j<word_grid[i].length; j++){",
                    "    var xpos = border + j*maxwidth/word_grid[i].length;",
                    "//     var xpos = border + j*maxwidth/max_row_length;",
                    "    var ypos = border + i*maxheight/word_grid.length;",
                    "    var node_obj = {x: xpos, y: ypos, data:word_grid[i][j]};",
                    "    nodes.push(node_obj);",
                    "    node_pos[i+\",\"+j] = node_obj;",
                    "  }",
                    "}",
                    "",
                    "",
                    "var elem = vis.selectAll(\"g\")",
                    "  .data(nodes);",
                    "",
                    "var elemEnter = elem.enter()",
                    "  .append(\"g\")",
                    "  .attr(\"transform\", function(d) { return \"translate(\"+d.x+\",\"+d.y+\")\"})",
                    "",
                    "",
                    "elemEnter.append(\"text\")",
                    "  .attr(\"dx\", function(d){return -20})",
                    "  .attr(\"font-size\", \"15px\")",
                    "  .text(function(d){return d.data})",
                    "",
                    "",
                    "// rhyme links",
                    "var rhymes = beaker.rhymes;",
                    "// list of list of (indexprev, indexcurr, weight)",
                    "var links = []",
                    "for (var i=0; i<rhymes.length; i++){",
                    "  for (var j=0; j<rhymes[i].length; j++){",
                    "    var src = node_pos[i+\",\"+rhymes[i][j][0]];",
                    "    var tgt = node_pos[(i+1)+\",\"+rhymes[i][j][1]];",
                    "    // emphasize high multiplicity connections",
                    "    var wt = Math.pow(rhymes[i][j][2], 1.5);",
                    "    links.push({source: src, target: tgt, weight: wt})",
                    "  }",
                    "}",
                    "",
                    "vis.selectAll(\".line\")",
                    "  .data(links)",
                    "  .enter()",
                    "  .append(\"line\")",
                    "  .attr(\"x1\", function(d) { return d.source.x })",
                    "  .attr(\"y1\", function(d) { return d.source.y })",
                    "  .attr(\"x2\", function(d) { return d.target.x })",
                    "  .attr(\"y2\", function(d) { return d.target.y })",
                    "  .style(\"stroke-width\", function(d) { return d.weight; })",
                    "  .style(\"opacity\", \"0.7\")",
                    "  .style(\"stroke\", \"rgb(6,120,155)\");",
                    "",
                    "",
                    "",
                    "// inline rhyme links",
                    "var inlines = beaker.inlines;",
                    "// list of list of (index, index, weight)",
                    "var inline_links = []",
                    "for (var i=0; i<inlines.length; i++){",
                    "  for (var j=0; j<inlines[i].length; j++){",
                    "    var src = node_pos[i+\",\"+inlines[i][j][0]];",
                    "    var tgt = node_pos[i+\",\"+inlines[i][j][1]];",
                    "    var wt = inlines[i][j][2];",
                    "    inline_links.push({source: src, target: tgt, weight: wt});",
                    "  }",
                    "}",
                    "",
                    "vis.selectAll(\".inline\")",
                    "  .data(inline_links)",
                    "  .enter()",
                    "  .append(\"path\")",
                    "  .attr(\"d\", function(d) {",
                    "    // curved link",
                    "    var dx = d.target.x - d.source.x,",
                    "        dy = d.target.y - d.source.y,",
                    "        dr = Math.sqrt(dx * dx + dy * dy);",
                    "    return \"M\" + d.source.x + \",\" + d.source.y + \"A\" + dr + \",\" + dr + \" 0 0,1 \" + d.target.x + \",\" + d.target.y;",
                    "  })",
                    "  .style(\"stroke-width\", function(d) { return d.weight; })",
                    "  .style(\"fill\", \"none\")",
                    "  .style(\"opacity\", \"0.7\")",
                    "  .style(\"stroke\", \"rgb(255,179,0)\");",
                    "",
                    ""
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 78,
                "state": {},
                "result": "ERROR: circular objects are not supported",
                "pluginName": "JavaScript"
            },
            "evaluatorReader": true,
            "lineCount": 110
        },
        {
            "id": "markdown188oO3",
            "type": "markdown",
            "body": [
                "Beaker also supports JavaScript, Julia, Groovy, Ruby, Scala, Python3, Java, and Node. To add another language to this notebook, select **Notebook → Language manager** from the menu on top of the screen.",
                "",
                "For general help, see the tutorial notebook under **Help → Tutorial** notebook."
            ],
            "evaluatorReader": false,
            "mode": "preview"
        }
    ],
    "namespace": {
        "x": 3,
        "words": {
            "type": "TableDisplay",
            "values": [
                [
                    "his",
                    "palms",
                    "are",
                    "sweaty",
                    "knees",
                    "weak",
                    "arms",
                    "are",
                    "heavy"
                ],
                [
                    "there's",
                    "vomit",
                    "on",
                    "his",
                    "sweater",
                    "already",
                    "mom's",
                    "spaghetti"
                ],
                [
                    "he's",
                    "nervous",
                    "but",
                    "on",
                    "the",
                    "surface",
                    "he",
                    "looks",
                    "calm",
                    "and",
                    "ready",
                    "to",
                    "drop",
                    "bombs"
                ],
                [
                    "but",
                    "he",
                    "keeps",
                    "on",
                    "forgetting",
                    "what",
                    "he",
                    "wrote",
                    "down"
                ],
                [
                    "the",
                    "whole",
                    "crowd",
                    "goes",
                    "so",
                    "loud"
                ],
                [
                    "he",
                    "opens",
                    "his",
                    "mouth",
                    "but",
                    "the",
                    "words",
                    "won't",
                    "come",
                    "out"
                ],
                [
                    "he's",
                    "choking",
                    "how",
                    "everybody's",
                    "joking",
                    "now"
                ],
                [
                    "the",
                    "clock's",
                    "run",
                    "out",
                    "time's",
                    "up",
                    "over",
                    "blaow"
                ],
                [
                    "snap",
                    "back",
                    "to",
                    "reality",
                    "oh",
                    "there",
                    "goes",
                    "gravity"
                ],
                [
                    "oh",
                    "there",
                    "goes",
                    "rabbit",
                    "he",
                    "choked"
                ],
                [
                    "he's",
                    "so",
                    "mad",
                    "but",
                    "he",
                    "won't",
                    "give",
                    "up",
                    "that"
                ]
            ],
            "subtype": "Matrix",
            "columnNames": [
                "c0",
                "c1",
                "c2",
                "c3",
                "c4",
                "c5",
                "c6",
                "c7",
                "c8"
            ],
            "types": [
                "string",
                "string",
                "string",
                "string",
                "string",
                "string",
                "string",
                "string",
                "string"
            ]
        },
        "rhymes": [
            [
                [
                    0,
                    3,
                    3
                ],
                [
                    3,
                    5,
                    1
                ],
                [
                    3,
                    4,
                    4
                ],
                [
                    8,
                    7,
                    2
                ],
                [
                    6,
                    6,
                    3
                ]
            ],
            [
                [
                    1,
                    2,
                    1
                ],
                [
                    0,
                    0,
                    1
                ],
                [
                    5,
                    10,
                    4
                ],
                [
                    4,
                    5,
                    2
                ],
                [
                    5,
                    7,
                    1
                ],
                [
                    2,
                    3,
                    2
                ],
                [
                    6,
                    13,
                    2
                ],
                [
                    6,
                    12,
                    1
                ],
                [
                    1,
                    1,
                    2
                ]
            ],
            [
                [
                    8,
                    3,
                    1
                ],
                [
                    11,
                    4,
                    1
                ],
                [
                    10,
                    4,
                    2
                ],
                [
                    11,
                    5,
                    1
                ],
                [
                    12,
                    7,
                    1
                ],
                [
                    9,
                    3,
                    1
                ],
                [
                    2,
                    0,
                    3
                ],
                [
                    6,
                    1,
                    2
                ],
                [
                    7,
                    2,
                    2
                ]
            ],
            [
                [
                    7,
                    3,
                    1
                ],
                [
                    0,
                    0,
                    1
                ],
                [
                    4,
                    3,
                    1
                ],
                [
                    2,
                    2,
                    1
                ],
                [
                    4,
                    2,
                    1
                ],
                [
                    8,
                    5,
                    1
                ],
                [
                    1,
                    1,
                    1
                ]
            ],
            [
                [
                    1,
                    2,
                    1
                ],
                [
                    5,
                    9,
                    1
                ],
                [
                    4,
                    7,
                    1
                ],
                [
                    2,
                    6,
                    1
                ],
                [
                    2,
                    3,
                    1
                ],
                [
                    3,
                    6,
                    1
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            [
                [
                    6,
                    3,
                    1
                ],
                [
                    3,
                    2,
                    1
                ],
                [
                    0,
                    0,
                    2
                ],
                [
                    2,
                    1,
                    1
                ],
                [
                    7,
                    4,
                    1
                ],
                [
                    9,
                    5,
                    1
                ],
                [
                    8,
                    4,
                    1
                ]
            ],
            [
                [
                    3,
                    0,
                    1
                ],
                [
                    4,
                    1,
                    1
                ],
                [
                    5,
                    2,
                    1
                ],
                [
                    5,
                    3,
                    1
                ]
            ],
            [
                [
                    1,
                    1,
                    1
                ],
                [
                    5,
                    7,
                    1
                ],
                [
                    2,
                    3,
                    1
                ],
                [
                    4,
                    6,
                    1
                ],
                [
                    3,
                    3,
                    1
                ]
            ],
            [
                [
                    7,
                    4,
                    1
                ],
                [
                    7,
                    3,
                    4
                ],
                [
                    4,
                    0,
                    1
                ],
                [
                    6,
                    2,
                    3
                ],
                [
                    5,
                    1,
                    3
                ]
            ],
            [
                [
                    0,
                    1,
                    1
                ],
                [
                    3,
                    2,
                    1
                ],
                [
                    4,
                    4,
                    2
                ],
                [
                    5,
                    5,
                    2
                ],
                [
                    3,
                    3,
                    3
                ]
            ]
        ],
        "inline": [
            [
                [
                    1,
                    2,
                    1
                ],
                [
                    6,
                    7,
                    1
                ],
                [
                    4,
                    6,
                    1
                ],
                [
                    4,
                    4,
                    1
                ],
                [
                    8,
                    9,
                    1
                ],
                [
                    8,
                    8,
                    1
                ],
                [
                    7,
                    8,
                    1
                ],
                [
                    2,
                    4,
                    1
                ]
            ],
            [
                [
                    1,
                    2,
                    1
                ],
                [
                    5,
                    7,
                    1
                ],
                [
                    3,
                    3,
                    1
                ],
                [
                    4,
                    5,
                    1
                ],
                [
                    7,
                    8,
                    1
                ],
                [
                    4,
                    4,
                    1
                ],
                [
                    9,
                    9,
                    1
                ],
                [
                    8,
                    9,
                    1
                ],
                [
                    8,
                    8,
                    1
                ],
                [
                    2,
                    3,
                    1
                ],
                [
                    2,
                    2,
                    1
                ],
                [
                    3,
                    4,
                    1
                ],
                [
                    5,
                    5,
                    1
                ]
            ],
            [
                [
                    6,
                    7,
                    1
                ],
                [
                    6,
                    6,
                    1
                ],
                [
                    4,
                    5,
                    1
                ],
                [
                    9,
                    9,
                    1
                ],
                [
                    5,
                    6,
                    1
                ],
                [
                    8,
                    8,
                    2
                ],
                [
                    0,
                    4,
                    1
                ],
                [
                    7,
                    8,
                    1
                ]
            ],
            [
                [
                    1,
                    2,
                    1
                ],
                [
                    6,
                    7,
                    1
                ],
                [
                    6,
                    6,
                    1
                ],
                [
                    4,
                    5,
                    1
                ],
                [
                    4,
                    4,
                    1
                ],
                [
                    7,
                    7,
                    2
                ],
                [
                    8,
                    9,
                    1
                ],
                [
                    5,
                    6,
                    1
                ],
                [
                    8,
                    8,
                    1
                ],
                [
                    0,
                    10,
                    1
                ],
                [
                    10,
                    11,
                    1
                ],
                [
                    7,
                    8,
                    1
                ],
                [
                    2,
                    4,
                    1
                ]
            ]
        ],
        "inlines": [
            [
                [
                    1,
                    6,
                    3
                ],
                [
                    2,
                    6,
                    2
                ],
                [
                    3,
                    8,
                    2
                ],
                [
                    6,
                    7,
                    2
                ]
            ],
            [
                [
                    1,
                    7,
                    2
                ],
                [
                    1,
                    6,
                    2
                ],
                [
                    4,
                    7,
                    3
                ],
                [
                    5,
                    7,
                    2
                ]
            ],
            [
                [
                    0,
                    6,
                    2
                ],
                [
                    1,
                    5,
                    3
                ]
            ],
            [
                [
                    0,
                    5,
                    2
                ],
                [
                    4,
                    7,
                    2
                ]
            ],
            [
                [
                    2,
                    5,
                    2
                ]
            ],
            [
                [
                    1,
                    7,
                    2
                ]
            ],
            [
                [
                    0,
                    3,
                    2
                ],
                [
                    1,
                    4,
                    4
                ]
            ],
            [],
            [
                [
                    3,
                    7,
                    4
                ]
            ],
            [],
            [
                [
                    0,
                    4,
                    2
                ]
            ]
        ]
    }
}
